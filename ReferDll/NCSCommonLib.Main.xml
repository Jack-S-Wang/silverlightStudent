<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCSCommonLib.Main</name>
    </assembly>
    <members>
        <member name="M:NCS.Algorithm.LevenshteinDistance.Similarity(System.String,System.String)">
            <summary>
            计算字符串的相似程度，返回值在0-1之间，0为完全不相似，1为完全一致
            </summary>
            <param name="s1">字符串1</param>
            <param name="s2">字符串2</param>
            <returns>相似度（0-1之间）</returns>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharType.Text">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharType.Symbol">
            <summary>
            符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeRegion.Ancient">
            <summary>
            古代文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeRegion.European">
            <summary>
            欧洲文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeRegion.African">
            <summary>
            非洲文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeRegion.MiddleEast">
            <summary>
            中东文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeRegion.American">
            <summary>
            美洲文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeRegion.India">
            <summary>
            印度文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeRegion.Asia">
            <summary>
            亚洲文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeRegion.Other">
            <summary>
            其他文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Armenia">
            <summary>
            亚美尼亚文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.ArmeniaDerive">
            <summary>
            亚美尼亚文字相关
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Coptic">
            <summary>
            科普特文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.CopticGreek">
            <summary>
            希腊文字中的科普特字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Cyrillic">
            <summary>
            西里尔文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Georglan">
            <summary>
            乔治亚风格文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Greek">
            <summary>
            希腊文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Latin">
            <summary>
            拉丁文
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.LatinDerive">
            <summary>
            拉丁文相关
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.LatinFullwidth">
            <summary>
            全角拉丁字母
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.LatinVarieties">
            <summary>
            小形式变体字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Ethiopic">
            <summary>
            埃塞俄比亚文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.NKo">
            <summary>
            N'Ko(非洲
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Tifinagh">
            <summary>
            提非纳字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Arabic">
            <summary>
            阿拉伯文
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Hebrew">
            <summary>
            希伯来文
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Syriac">
            <summary>
            叙利亚文
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Thaana">
            <summary>
            塔纳文
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Canadian">
            <summary>
            加拿大语字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Cherokee">
            <summary>
            切罗基字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Utah">
            <summary>
            犹他字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Shavian">
            <summary>
            萧伯纳风格字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Osman">
            <summary>
            奥斯曼字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Glagolitsia">
            <summary>
            格拉哥里字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.GeneralSymbol">
            <summary>
            通用标点符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.OtherSymbol">
            <summary>
            各类其他符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Pronunciation">
            <summary>
            音标符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Math">
            <summary>
            数学符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Currency">
            <summary>
            货币符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Bengal">
            <summary>
            孟加拉字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Sanskrit">
            <summary>
            梵文字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Gujarati">
            <summary>
            古吉拉特字符/果鲁穆奇字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Kannada">
            <summary>
            埃纳德字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Limbu">
            <summary>
            林布字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Malayalam">
            <summary>
            马拉亚拉姆字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Oria">
            <summary>
            奥里亚字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Sinhala">
            <summary>
            僧伽罗字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.SylotiNagri">
            <summary>
            Syloti Nagri字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Thamel">
            <summary>
            泰米尔字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Telugu">
            <summary>
            泰卢固字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Philippines_Buhid">
            <summary>
            Buhid字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Philippines_Hanunoo">
            <summary>
            哈鲁喏字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Philippines_Tagalog">
            <summary>
            塔加路字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Philippines_Tagbanwa">
            <summary>
            泰格班瓦字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Buginese">
            <summary>
            布吉字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Bali">
            <summary>
            巴厘字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Cambodia">
            <summary>
            高棉字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.CambodiaSymbol">
            <summary>
            高棉符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Lao">
            <summary>
            老挝语字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Burmese">
            <summary>
            缅甸语字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.NewTaiLue">
            <summary>
            新傣泐文字母
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.DaiSlow">
            <summary>
            傣讷文字母（德宏傣文、德傣文
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Thai">
            <summary>
            泰语字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.CJK_Han">
            <summary>
            中日韩统一汉字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.ChineseTag">
            <summary>
            汉字注释标记
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.CJK_Part">
            <summary>
            部首和笔画
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.ChineseSymbol">
            <summary>
            中文专用符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.JapaneseSymbol">
            <summary>
            日文专用符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.KoreanSymbol">
            <summary>
            朝鲜文字专用符号
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.YiSymbol">
            <summary>
            Yi
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Kharoshihi">
            <summary>
            Kharoshihi
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Mongolia">
            <summary>
            蒙古字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Phagspa">
            <summary>
            八思巴字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Tibetan">
            <summary>
            藏语字符
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.AncientGreek">
            <summary>
            古希腊
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Cuneiform">
            <summary>
            楔形文字
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.LinearB">
            <summary>
            线状B
            </summary>
        </member>
        <member name="F:NCS.Algorithm.Text.Unicode.UnicodeCharCulture.Other">
            <summary>
            其他古文字
            </summary>
        </member>
        <member name="T:NCS.Business.CommonLogic">
            <summary>
            业务逻辑中的通用方法
            </summary>
        </member>
        <member name="M:NCS.Business.CommonLogic.CheckStringLength(System.String,System.UInt32,System.UInt32)">
            <summary>
            检查字符串长度，包括最小和最大值
            </summary>
            <param name="str">要检查的字符串</param>
            <param name="minlen">最小合法长度</param>
            <param name="maxlen">最大合法长度</param>
            <returns>是否在规定的长度之内，若字符串为null或maxlen小于minlen 且HideException=false时将引发异常</returns>
        </member>
        <member name="M:NCS.Business.CommonLogic.CheckStringWithInvalidChars(System.String,System.Char[])">
            <summary>
            检查字符串是否包含非法字符，可以省略非法字符变量，将只检查半角单引号和双引号，字符串可以为空，为空将返回true
            </summary>
            <param name="str">要检查的字符串</param>
            <param name="filterchar">要检查的非法字符集合，可省略，默认检查半角单引号和双引号</param>
            <returns>是否是合法的字符串，即</returns>
        </member>
        <member name="T:NCS.Business.CommonLogic.PasswordStrongLevel">
            <summary>
            表示密码强度
            </summary>
        </member>
        <member name="F:NCS.Business.CommonLogic.PasswordStrongLevel.Empty">
            <summary>
            空密码
            </summary>
        </member>
        <member name="F:NCS.Business.CommonLogic.PasswordStrongLevel.Week">
            <summary>
            弱密码，仅包含数字，字母或符号中的１项
            </summary>
        </member>
        <member name="F:NCS.Business.CommonLogic.PasswordStrongLevel.Normal">
            <summary>
            普通密码（包含数字，字母或符号中的２项）
            </summary>
        </member>
        <member name="F:NCS.Business.CommonLogic.PasswordStrongLevel.Strong">
            <summary>
            强密码，同时包含数字，字母和符号
            </summary>
        </member>
        <member name="M:NCS.Business.CommonLogic.CheckPasswordStrong(System.String)">
            <summary>
            判断密码是否为强密码（强口令），本函数不检验密码长度
            </summary>
            <param name="password">要检验的密码</param>
            <returns>密码强度级别</returns>
        </member>
        <member name="P:NCS.Business.CommonLogic.CurrentInformation">
            <summary>
            当前项目的用户，权限，数据库联接串等信息，请在初始化程序时，将继承 ICurrentInformation 的类的实例赋予该属性。
            </summary>
        </member>
        <member name="T:NCS.Business.ICurrentInformation">
            <summary>
            用以保存当前工程所需的公共数据，
            若有其他附加或自定义属性，请在继承的类中自行添加
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.UserName">
            <summary>
            当前登录的用户名
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.Department">
            <summary>
            当前用户所在部门
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.BranchCode">
            <summary>
            当前用户所属分行编号，如 C01
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.BranchName">
            <summary>
            当前用户所属分行名称
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.Role">
            <summary>
            当前用户所属权限，内容为|分割的RoleList
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.RoleList">
            <summary>
            当前用户所属的权限组的集合
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.BranchCodeList">
            <summary>
            当前用户所属的所有分行的列表（从属多分行时）
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.DepartmentList">
            <summary>
            当前用户所属的所有部门列表（从属多部门）
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.SQLConnectionString">
            <summary>
            项目的数据库连接串
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.LoginTime">
            <summary>
            当前用户登录时间
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.SaveLog">
            <summary>
            启动一个新的数据库操作上下文
            </summary>
            <returns></returns>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.CommondTimeout">
            <summary>
            命令执行超时时间，SQL默认为30秒
            </summary>
        </member>
        <member name="P:NCS.Business.ICurrentInformation.Item(System.String)">
            <summary>
            获取或设置指定key相对应的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.Business.CurrentInformation">
            <summary>
            用于描述当前程序相关配置信息接口的默认实现。
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.BranchCode">
            <summary>
            当前用户所属分行编号，如 C01
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.BranchName">
            <summary>
            当前用户所属分行名称
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.Department">
            <summary>
            当前用户所在部门
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.LoginTime">
            <summary>
            当前用户登录时间
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.Role">
            <summary>
            当前用户所属权限
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.SQLConnectionString">
            <summary>
            项目的数据库连接串
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.UserName">
            <summary>
            当前登录的用户名
            </summary>
        </member>
        <member name="M:NCS.Business.CurrentInformation.AddLog(System.String)">
            <summary>
            添加一条log纪录
            </summary>
            <param name="s">要添加的log内容</param>
        </member>
        <member name="M:NCS.Business.CurrentInformation.CloseLogFile">
            <summary>
            关闭Log文件
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.CommondTimeout">
            <summary>
            命令执行超时时间，SQL默认为30秒
            </summary>
        </member>
        <member name="P:NCS.Business.CurrentInformation.SaveLog">
            <summary>
            是否保存执行的SQL的log
            </summary>
        </member>
        <member name="T:NCS.Business.CurrentInformationWeb">
            <summary>
            ICurrentInformation 接口的Web实现，数据基于Session存储，其中SQLConnectionString，SaveLog，CommandTimeout为全局变量，不依赖于Session
            </summary>
        </member>
        <member name="M:NCS.Business.DataFlow.TransactionScope2.GetCurrentTransactionScope">
            <summary>
            获取当前的TransactionScope对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.DataFlow.DataFlowHelper.BuildAccessQueryCondition(System.Type,System.String,System.Boolean,System.Boolean,NCS.DataAccess.QueryConditions,NCS.Business.DataFlow.EnumAuditState[])">
            <summary>
            根据参数，自动生成权限筛选条件，并合并到qc参数中，执行本函数后的，qc参数就已包含相应筛选条件。
            </summary>
            <param name="t">实体类类型，需要针对何种类型的实体类做筛选，通过该参数指定</param>
            <param name="_businessModel">当前允许访问的模块，可以留空表示忽略模块</param>
            <param name="onlyMyselfData">只包含当前用户提交的数据</param>
            <param name="excludeonlyMyselfData">排除当前用户提交的数据</param>
            <param name="qc">查询条件</param>
            <param name="aduitstate">筛选指定审批状态，可以为空，则不做限制</param>
        </member>
        <member name="T:NCS.Business.Forms.Delegate_CheckEntity`1">
            <summary>
            用于检查实体类的委托方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体类实例</param>
            <returns>是否满足符合要求</returns>
        </member>
        <member name="T:NCS.Business.Forms.Delegate_ProcessData`1">
            <summary>
            执行自定义处理的委托定义
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="action_status">表示当前是新建/修改/删除操作，值根据DataStatus_AddValue等返回</param>
            <param name="entity">实体类实例</param>
        </member>
        <member name="T:NCS.Business.Forms.MaintenanceLogEventArgs">
            <summary>
            维护控件的Log事件参数，当需要记录Log时，将触发对应事件，并通过本参数类提供记录Log所需的内容
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.MaintenanceLogEventArgs.Operate">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.MaintenanceLogEventArgs.Entity">
            <summary>
            实体类，处理单个实体时适用
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.MaintenanceLogEventArgs.EntityList">
            <summary>
            实体数组，批量处理时适用
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.MaintenanceLogEventArgs.Success">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.MaintenanceLogEventArgs.Exception">
            <summary>
            若操作失败，若包含异常，可以通过该属性读取
            </summary>
        </member>
        <member name="T:NCS.Business.Forms.MaintenanceEditEventArgs`1">
            <summary>
            编辑事件参数，当处理较为复杂的对象时，可能默认提供的编辑功能将不再适用，可以通过处理编辑事件，拦截默认编辑实现，并通过该参数获取/返回编辑的实体类实例
            </summary>
            <typeparam name="MappingType"></typeparam>
        </member>
        <member name="P:NCS.Business.Forms.MaintenanceEditEventArgs`1.Context">
            <summary>
            数据上下文对象
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.MaintenanceEditEventArgs`1.LinqObject">
            <summary>
            实体类实例
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.MaintenanceEditEventArgs`1.Cancel">
            <summary>
            是否取消后续操作，当自定义处理事件取消或出错时，当已实现对数据库的操作时，均可设置该属性为true
            </summary>
        </member>
        <member name="T:NCS.Business.Forms.EntityPendingDescription`2">
            <summary>
            用于配置实体pending状态的详细描述类
            </summary>
            <typeparam name="MappingType">实体类</typeparam>
            <typeparam name="Mapping_Pending">实体类对应的Pending类</typeparam>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.DataStatus_Property">
            <summary>
            DataStatus属性名称，用于标记Add/Edit/Remove等操作的属性名
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.DataStatus_AddValue">
            <summary>
            用于描述Add操作的DataStatus属性值，类型必须和DataStatus_Property指定的属性类型一致，不能为空
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.DataStatus_EditValue">
            <summary>
            用于描述Edit操作的DataStatus属性值，类型必须和DataStatus_Property指定的属性类型一致，不能为空
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.DataStatus_RemoveValue">
            <summary>
            用于描述Remove操作的DataStatus属性值，类型必须和DataStatus_Property指定的属性类型一致，不能为空
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.AuthStatus_Property">
            <summary>
            AuthStatus属性名称，用于标记Approve/Reject/Pending等审批状态的属性名
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.AuthStatus_PendingValue">
            <summary>
            用于描述 Pending 操作的AuthStatus属性值，类型必须和AuthStatus_Property指定的属性类型一致，不能为空
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.AuthStatus_ApproveValue">
            <summary>
            用于描述 Approve 操作的AuthStatus属性值，类型必须和AuthStatus_Property指定的属性类型一致，不能为空
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.AuthStatus_RejectValue">
            <summary>
            用于描述 Reject 操作的AuthStatus属性值，类型必须和AuthStatus_Property指定的属性类型一致，不能为空
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.SubmitBy_Property">
            <summary>
            用于记录数据操作者的属性名，该属性必须为字符串
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.SubmitDate_Property">
            <summary>
            用于记录数据操作时间的属性名，该属性必须为DateTime类型
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.AuthBy_Property">
            <summary>
            用于记录数据审批者的属性名，该属性必须为字符串
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.AuthDate_Property">
            <summary>
            用于记录数据审批时间的属性名，该属性必须为DateTime或DateTime?类型
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.AutoGenerateIntegerProperty">
            <summary>
            用于标记自增数值型字段，当编辑操作时，会默认隐藏这些字段，并会为Add数据分配一个随机负值
            </summary>
        </member>
        <member name="F:NCS.Business.Forms.EntityPendingDescription`2.ProcessDataBeforeSave">
            <summary>
            在数据入库之前，进行自定义处理的委托，可以在函数内修改实体类的内容
            </summary>
        </member>
        <member name="F:NCS.Business.Forms.EntityPendingDescription`2.ProcessPendingDataBeforeSave">
            <summary>
            在数据入库之前，进行自定义处理的委托，可以在函数内修改实体类的内容
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.EntityPendingDescription`2.AddEditFormSize">
            <summary>
            获取或设置添加/编辑窗口的默认尺寸
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.SetSubmitBy(System.Object)">
            <summary>
            自动设置操作人和操作时间
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.SetAuthBy(System.Object)">
            <summary>
            自动设置审批人和审批时间
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.SetAutoGenerateIntegerProperty_for_PendingEntity(System.Object)">
            <summary>
            自动为正式表中是自增数值类型的字段，而Pending表中为普通数值的字段分配默认值。
            </summary>
            <param name="newpending_entity"></param>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.GetPendingObject(`0)">
            <summary>
            根据正式数据，获取Pending数据，前提2着的主键必须一致，若不存在返回null
            </summary>
            <param name="formalobject">正式数据</param>
            <returns>Pending数据，若不存在返回null</returns>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.GetFormalObject(`1)">
            <summary>
            根据Pending数据，获取正式数据，前提2着的主键必须一致，若不存在返回null
            </summary>
            <param name="pendingobj">Pending数据</param>
            <returns>正式数据，若不存在返回null</returns>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.PrimaryKeyExist(`1)">
            <summary>
            检查正式表和Pending表，检查对应主键是否已存在
            </summary>
            <param name="pendingobj">Pending对象</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.PrimaryKeyExist(`0)">
            <summary>
            检查正式表和Pending表，检查对应主键是否已存在
            </summary>
            <param name="obj">正式数据对象</param>
            <returns>已存在</returns>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.MoveDataStatusFieldToFirst(NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            将DataStatus对应的字段提前，主要用于Pending/Repair列表
            </summary>
            <param name="defaultfieldinfo"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.HideAuthStatusField(NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            将AuthStatus对应的字段隐藏，主要用于Pending/Repair列表
            </summary>
            <param name="defaultfieldinfo"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.HideAuthByField(NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            隐藏审批人和审批时间字段
            </summary>
            <param name="defaultfieldinfo"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.Forms.EntityPendingDescription`2.HideSystemFields(NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            隐藏系统字段，包括审批人/操作人/审批时间/操作时间/数据状态/审批状态/自增字段等
            </summary>
            <param name="defaultfieldinfo"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.Business.Forms.frmCheckerCompare">
            <summary>
            用于对比2个对象
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.frmCheckerCompare.#ctor(System.Data.Linq.DataContext,System.Object,System.Object,NCS.UI.DataMapping.FieldInfo[],System.Boolean)">
            <summary>
            创建一个对比窗口
            </summary>
            <param name="context">数据上下文对象</param>
            <param name="obj1">正是数据（原数据）</param>
            <param name="obj2">修改后的数据</param>
            <param name="filedsettings">显示的字段配置</param>
            <param name="displayallfields">是否显示所有未通过filedsettings配置的字段</param>
        </member>
        <member name="F:NCS.Business.Forms.frmCheckerCompare.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.frmCheckerCompare.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.Business.Forms.frmCheckerCompare.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.Business.Forms.frmMaintenance`2">
            <summary>
            用于标准的dualContorl的Maker界面，包括查询/编辑/Pending/Repair
            </summary>
            <typeparam name="MappingType">数据实体类型，必须是Linq2SQL的实体类</typeparam>
            <typeparam name="Mapping_Pending">数据实体类型对应的pending类型，必须是Linq2SQL的实体类，注意，各个属性和字段必须和MappingType一致</typeparam>
        </member>
        <member name="P:NCS.Business.Forms.frmMaintenance`2.Context">
            <summary>
            数据上下文对象
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.frmMaintenance`2.#ctor(System.String,System.String,System.Data.Linq.DataContext,System.Boolean,System.Boolean,NCS.Business.Forms.EntityPendingDescription{`0,`1})">
            <summary>
            构造函数
            </summary>
            <param name="title">界面的标题</param>
            <param name="entityname">实体类的名词，将用于提示对话框中</param>
            <param name="context">上下文对象，若为空，将自行创建一个</param>
            <param name="canedit">是否允许编辑操作</param>
            <param name="canremove">是否允许删除操作</param>
            <param name="pendingdesc">一个EntityPendingDescription实例，是必须的</param>
        </member>
        <member name="M:NCS.Business.Forms.frmMaintenance`2.#ctor(System.String,System.String,System.Data.Linq.DataContext,System.Boolean,System.Boolean,System.Boolean,NCS.Business.Forms.EntityPendingDescription{`0,`1})">
            <summary>
            构造函数
            </summary>
            <param name="title">界面的标题</param>
            <param name="entityname">实体类的名词，将用于提示对话框中</param>
            <param name="context">上下文对象，若为空，将自行创建一个</param>
            <param name="canedit">是否允许编辑操作</param>
            <param name="canremove">是否允许删除操作</param>
            <param name="canremoveReject">是否允许撤销被拒批数据</param>
            <param name="pendingdesc">一个EntityPendingDescription实例，是必须的</param>
        </member>
        <member name="P:NCS.Business.Forms.frmMaintenance`2.FieldSettings_Query">
            <summary>
            为Query界面中指定特殊的字段配置，将与构造函数中的默认FieldSettings整合
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.frmMaintenance`2.FieldSettings_Pending">
            <summary>
            为Pending界面中指定特殊的字段配置，将与构造函数中的默认FieldSettings整合
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.frmMaintenance`2.FieldSettings_Repair">
            <summary>
            为Repair界面中指定特殊的字段配置，将与构造函数中的默认FieldSettings整合，若为空(null)，则将使用与Pending一致的配置
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.frmMaintenance`2.FieldSettings_Edit">
            <summary>
            为Edit界面中指定特殊的字段配置，将与构造函数中的默认FieldSettings整合
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.frmMaintenance`2.FieldSettings_Add">
            <summary>
            为Add界面中指定特殊的字段配置，将与构造函数中的默认FieldSettings整合，若为空(null)，则将使用与Edit一致的配置
            </summary>
        </member>
        <member name="F:NCS.Business.Forms.frmMaintenance`2.CanEdit">
            <summary>
            用于检查对象是否可以编辑的自定义检查函数，不设置则不做额外检查
            </summary>
        </member>
        <member name="F:NCS.Business.Forms.frmMaintenance`2.CanRemove">
            <summary>
            用于检查对象是否可以移除的自定义检查函数，不设置则不做额外检查
            </summary>
        </member>
        <member name="F:NCS.Business.Forms.frmMaintenance`2.CanAdd">
            <summary>
            用于检查对象是否可以添加的自定义检查函数，不设置则不做额外检查
            </summary>
        </member>
        <member name="F:NCS.Business.Forms.frmMaintenance`2.CanRepairEdit">
            <summary>
            用于检查Repair对象是否可以编辑的自定义检查函数，不设置则不做额外检查
            </summary>
        </member>
        <member name="F:NCS.Business.Forms.frmMaintenance`2.CanRepairRemove">
            <summary>
            用于检查Repair对象是否可以移除的自定义检查函数，不设置则不做额外检查
            </summary>
        </member>
        <member name="E:NCS.Business.Forms.frmMaintenance`2.BeforeQuery_Query">
            <summary>
            当Query/Maintenance界面中，查询时触发，可以添加额外条件
            </summary>
        </member>
        <member name="E:NCS.Business.Forms.frmMaintenance`2.BeforeQuery_Pending">
            <summary>
            当Pending界面中，查询时触发，可以添加额外条件
            </summary>
        </member>
        <member name="E:NCS.Business.Forms.frmMaintenance`2.BeforeQuery_Repair">
            <summary>
            当Repair界面中，查询时触发，可以添加额外条件
            </summary>
        </member>
        <member name="E:NCS.Business.Forms.frmMaintenance`2.LogEvent">
            <summary>
            当需要记录Log时触发
            </summary>
        </member>
        <member name="E:NCS.Business.Forms.frmMaintenance`2.OverrideEdit">
            <summary>
            默认的编辑操作无法满足需求时，可以配置该事件，自行实现编辑/添加等操作
            </summary>
        </member>
        <member name="F:NCS.Business.Forms.frmMaintenance`2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.frmMaintenance`2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.Business.Forms.frmMaintenance`2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.Business.Forms.frmMaintenance_Checker`2">
            <summary>
            维护数据的审批界面
            </summary>
            <typeparam name="MappingType"></typeparam>
            <typeparam name="Mapping_Pending"></typeparam>
        </member>
        <member name="P:NCS.Business.Forms.frmMaintenance_Checker`2.Context">
            <summary>
            数据上下文对象
            </summary>
        </member>
        <member name="E:NCS.Business.Forms.frmMaintenance_Checker`2.BeforeQuery">
            <summary>
            当列表查询时触发，可以添加额外条件
            </summary>
        </member>
        <member name="E:NCS.Business.Forms.frmMaintenance_Checker`2.LogEvent">
            <summary>
            当需要记录Log时触发
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.frmMaintenance_Checker`2.#ctor(System.String,System.Data.Linq.DataContext,NCS.Business.Forms.EntityPendingDescription{`0,`1},NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            构造函数
            </summary>
            <param name="title">窗口标题</param>
            <param name="context">数据上下文对象，为null则自行创建一个</param>
            <param name="pendingdesc">一个EntityPendingDescription实例，是必须的</param>
            <param name="fieldsettings">字段配置</param>
        </member>
        <member name="F:NCS.Business.Forms.frmMaintenance_Checker`2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.frmMaintenance_Checker`2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.Business.Forms.frmMaintenance_Checker`2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.Business.Forms.frmSourceChecker">
            <summary>
            用于对上传/导入的Source表做审批操作的默认实现
            </summary>
        </member>
        <member name="E:NCS.Business.Forms.frmSourceChecker.LogEvent">
            <summary>
            当需要记录Log时触发
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.frmSourceChecker.#ctor(NCS.Business.Forms.SourceTypeItem[])">
            <summary>
            构造函数
            </summary>
            <param name="sourcetypelist">一个用于描述所有需要审批的Source类型的列表，是必须的</param>
        </member>
        <member name="F:NCS.Business.Forms.frmSourceChecker.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.frmSourceChecker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.Business.Forms.frmSourceChecker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.Business.Forms.SourceTypeItem">
            <summary>
            用于描述Source类型的描述类，并包含审批/查询等数据操作的实现
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.Name">
            <summary>
            Source类型名称
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.Auth_Status_Field">
            <summary>
            审批状态字段名称
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.Report_Date_Field">
            <summary>
            ReportDate字段名称
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.FileName_Field">
            <summary>
            SourceFile的FileName字段名称
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.PendingStatus">
            <summary>
            审批状态中Pending状态的值
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.ApproveStatus">
            <summary>
            审批状态中Approve状态的值
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.RejectStatus">
            <summary>
            审批状态中Reject状态的值
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.DBTable">
            <summary>
            数据库中，对应的表名称
            </summary>
        </member>
        <member name="P:NCS.Business.Forms.SourceTypeItem.ApproveBy_Field">
            <summary>
            审批人字段名
            </summary>
        </member>
        <member name="M:NCS.Business.Forms.SourceTypeItem.ToString">
            <summary>
            已重载，数据当前SourceType的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.Forms.SourceTypeItem.Approve(System.DateTime,System.String)">
            <summary>
            审批操作
            </summary>
            <param name="ReportDate"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.Forms.SourceTypeItem.Reject(System.DateTime,System.String)">
            <summary>
            拒绝操作
            </summary>
            <param name="ReportDate"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.Forms.SourceTypeItem.GetReportDateList">
            <summary>
            获取当前待审批的ReportDate列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.Forms.SourceTypeItem.GetFileNameList(System.DateTime)">
            <summary>
            获取当前待审批的，指定ReportDate的上传的文件名列表
            </summary>
            <param name="ReportDate"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Business.Forms.SourceTypeItem.GetData(System.DateTime,System.String,System.Int32@)">
            <summary>
            查询数据，根据传入的文件名/ReportDate返回待审批数据，并返回总条数
            </summary>
            <param name="ReportDate"></param>
            <param name="FileName"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.Business.IDataDisplayString">
            <summary>
            针对某些字段值，比如枚举，或者其他诸如状态指等转换为友好的显示内容
            </summary>
        </member>
        <member name="M:NCS.Business.IDataDisplayString.GetDisplayString(System.Object,System.Object)">
            <summary>
            根据传入的值返回转换后，可显示在界面上的内容
            </summary>
            <param name="datacontext">数据上下文，传入的值的宿主，比如实体类本身或DataRow等</param>
            <param name="obj">传入的值</param>
            <returns></returns>
        </member>
        <member name="T:NCS.Business.OnLoadStart">
            <summary>
            当开始读取数据时触发
            </summary>
            <param name="MaxProgress">最大值（可用于进度条）</param>
        </member>
        <member name="T:NCS.Business.OnProgressChange">
            <summary>
            当进度发生改变时触发
            </summary>
            <param name="CurrentProgress">当前进度（可用于进度条，该值小于OnLoadStart.MaxProgress，大于等于0）</param>
        </member>
        <member name="T:NCS.Business.OnLoadEnd">
            <summary>
            当读取数据完成时触发
            </summary>
        </member>
        <member name="T:NCS.Business.LoadFile">
            <summary>
            用以载入花旗文本数据文件的类，该类主要处理每行一个条数据的文件，该类必须被继承，并实现SaveData和CheckFormat方法
            </summary>
        </member>
        <member name="M:NCS.Business.LoadFile.SaveData(System.String[],System.Int32,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            重写本方法，本方法主要用来处理已通过验证的数据
            </summary>
            <param name="strParts">该行数据被拆分并被Trim后的字符串数组</param>
            <param name="idx">当前处理第idx行数据（从第一行符合要求的数据开始计算）</param>
            <param name="ReprotName">Source文件的报表名（若存在文件头，否则为null）</param>
            <param name="ReprotID">Source文件的报表ID（若存在文件头，否则为null）可验证载入文件是否正确</param>
            <param name="ReportDate">Source文件的报表生成时间（若存在文件头，否则为DateTime.MinValue）</param>
            <param name="UserData">调用主函数时，用户的传入的自定义数据</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:NCS.Business.LoadFile.CheckFormat(System.String@,System.Object[])">
            <summary>
            重写本方法，本方法主要用来预处理初步符合要求的数据，如对数据做进一步处理或修改，也可以在此执行其他操作。
            </summary>
            <param name="strLine">当前处理的行</param>
            <param name="UserData">调用主函数时，用户的传入的自定义数据</param>
            <returns>是否通过检查</returns>
        </member>
        <member name="E:NCS.Business.LoadFile.LoadStart">
            <summary>
            当开始读取数据时触发
            </summary>
        </member>
        <member name="E:NCS.Business.LoadFile.ProgressChange">
            <summary>
            当进度发生改变时触发
            </summary>
        </member>
        <member name="E:NCS.Business.LoadFile.LoadEnd">
            <summary>
            当读取数据完成时触发
            </summary>
        </member>
        <member name="M:NCS.Business.LoadFile.SetRegex(System.String)">
            <summary>
            初始化验证格式的正则表达式
            </summary>
            <param name="RegexExp">验证格式的正则表达式</param>
        </member>
        <member name="M:NCS.Business.LoadFile.Finalize">
            <summary>
            构析函数
            </summary>
        </member>
        <member name="M:NCS.Business.LoadFile.Dispose">
            <summary>
            释放该对象占用的资源
            </summary>
        </member>
        <member name="M:NCS.Business.LoadFile.LoadFromFile(System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            读取文件的主方法
            </summary>
            <param name="filename">要读取的文件</param>
            <param name="checkFileHeader">是否校验文件头</param>
            <param name="ReportID">校验的Report的ID，若不校验文件头，则忽略本参数</param>
            <param name="UserData">用户自定义数据，可以是附加数据，事务对象等</param>
            <returns>保存成功项目的数量，返回-1表示文件不存在</returns>
        </member>
        <member name="T:NCS.Business.Log.ILog`2">
            <summary>
            Log类功能的公共接口
            </summary>
            <typeparam name="T">代表类型的枚举类型，必须是枚举类型</typeparam>
            <typeparam name="S">代表操作状态的枚举类型，必须是枚举类型</typeparam>
        </member>
        <member name="M:NCS.Business.Log.ILog`2.Add(System.String,System.String,`0,`1,System.String,System.String,System.String)">
            <summary>
            添加一条新的Log
            </summary>
            <param name="userid">操作的用户</param>
            <param name="role">用户的权限组</param>
            <param name="type">Log类型</param>
            <param name="tableobject">处理的数据库表名称或者其他操作的对象名称</param>
            <param name="state">操作状态</param>
            <param name="comments">操作说明</param>
            <param name="details">额外信息</param>
        </member>
        <member name="M:NCS.Business.Log.ILog`2.Add(System.String,`0,`1,System.String)">
            <summary>
            添加一条新的Log
            </summary>
            <param name="userid">操作的用户</param>
            <param name="state">操作状态</param>
            <param name="type">Log类型</param>
            <param name="comments">操作说明</param>
        </member>
        <member name="M:NCS.Business.Log.ILog`2.Add(`0,`1,System.String)">
            <summary>
            添加一条新的Log
            </summary>
            <param name="type">Log类型</param>
            <param name="state">操作状态</param>
            <param name="comments">操作说明</param>
        </member>
        <member name="M:NCS.Business.Log.ILog`2.Add(`0,System.String)">
            <summary>
            添加一条新的Log
            </summary>
            <param name="type">Log类型</param>
            <param name="comments">操作说明</param>
        </member>
        <member name="P:NCS.Business.Log.ILog`2.EnabledType">
            <summary>
            允许记录Log的类型，若不包含在本列表中，对应的log将被忽略而不会被保存
            </summary>
        </member>
        <member name="P:NCS.Business.Log.ILog`2.DataSource">
            <summary>
            根据数据源不同，可以是数据库联接串，或者是文件名等
            </summary>
        </member>
        <member name="T:NCS.Business.Log.LogBaseState">
            <summary>
            默认的log状态枚举，没有特殊要求的情况下，可以使用本枚举作为ILog中的S泛型变量
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseState.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:NCS.Business.Log.LogBaseType">
            <summary>
            默认的log类型枚举，没有特殊要求的情况下，可以使用本枚举作为ILog中T的泛型变量
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.SettingsChanged">
            <summary>
            设置变更
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.InsertData">
            <summary>
            插入新数据
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.RemoveData">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.EditData">
            <summary>
            编辑数据
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.QueryData">
            <summary>
            查询数据
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.Login">
            <summary>
            登陆
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.Logoff">
            <summary>
            登出
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.LoginFaild">
            <summary>
            登陆失败
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.UploadData">
            <summary>
            数据上传
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.SettingsApprove">
            <summary>
            审批设置
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.SettingsReject">
            <summary>
            拒批设置
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.DataApprove">
            <summary>
            审批数据
            </summary>
        </member>
        <member name="F:NCS.Business.Log.LogBaseType.DataReject">
            <summary>
            拒批数据
            </summary>
        </member>
        <member name="T:NCS.Business.Log.Log2DB`2">
            <summary>
            写入数据库的Log类
            </summary>
            <typeparam name="T">代表类型的枚举类型，必须是枚举类型,无特殊情况,请使用NCS.Business.Log.LogBaseType</typeparam>
            <typeparam name="S">代表操作状态的枚举类型，必须是枚举类型,无特殊情况,请使用NCS.Business.Log.LogBaseState</typeparam>
        </member>
        <member name="M:NCS.Business.Log.Log2DB`2.Add(System.String,System.String,`0,`1,System.String,System.String,System.String)">
            <summary>
            添加一条新的Log到数据库
            </summary>
            <param name="userid">操作人</param>
            <param name="role"></param>
            <param name="type">Log类型</param>
            <param name="state">操作状态</param>
            <param name="tableobject">操作的数据对象/数据表名</param>
            <param name="comments">Log说明</param>
            <param name="details">附加信息,诸如修改了哪些字段等</param>
        </member>
        <member name="M:NCS.Business.Log.Log2DB`2.Add(System.String,`0,`1,System.String)">
            <summary>
            添加一条新的Log到数据库
            </summary>
            <param name="userid">操作的用户</param>
            <param name="state">操作状态</param>
            <param name="type">Log类型</param>
            <param name="comments">操作说明</param>
        </member>
        <member name="M:NCS.Business.Log.Log2DB`2.Add(`0,`1,System.String)">
            <summary>
            添加一条新的Log到数据库
            </summary>
            <param name="type">Log类型</param>
            <param name="state">操作状态</param>
            <param name="comments">操作说明</param>
        </member>
        <member name="M:NCS.Business.Log.Log2DB`2.Add(`0,System.String)">
            <summary>
            添加一条新的Log到数据库
            </summary>
            <param name="type">Log类型</param>
            <param name="comments">操作说明</param>
        </member>
        <member name="P:NCS.Business.Log.Log2DB`2.EnabledType">
            <summary>
            获取或设置一个值,表示哪些Log会被记录在案
            </summary>
        </member>
        <member name="P:NCS.Business.Log.Log2DB`2.DataSource">
            <summary>
            根据数据源不同，设置数据库联接串
            </summary>
        </member>
        <member name="M:NCS.Business.Log.Log2DB`2.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCS.Business.Log.LogEntity.#ctor(System.Data.DataRow)">
            <summary>
            通过一行数据，创建该对象
            </summary>
            <param name="dr">包含所有字段的DataRow对象</param>
        </member>
        <member name="M:NCS.Business.Log.LogEntity.InsertFromTempTable(NCS.DataAccess.Transaction,System.Collections.Generic.ICollection{NCS.Business.Log.LogEntity})">
            <summary>
            将零时表的数据一次性插入正式表，注意，零时表操作使得ID属性与实际表的属性并不相符，若有必要，请重新获取正式表中的数据以获得正确的ID属性。
            </summary>
            <param name="trans">需要使用的事务，若为null将不使用事务，注意：零时表是与事务相关的</param>
            <param name="collection">需要更新的数据集合，若为null，将复制所有零时表的数据</param>
            <returns>更新的条数</returns>
        </member>
        <member name="T:NCS.Business.Log.Log2File`2">
            <summary>
            将Log写入指定的文件
            </summary>
            <typeparam name="T">代表类型的枚举类型，必须是枚举类型,无特殊情况,请使用NCS.Business.Log.LogBaseType</typeparam>
            <typeparam name="S">代表操作状态的枚举类型，必须是枚举类型,无特殊情况,请使用NCS.Business.Log.LogBaseState</typeparam>
        </member>
        <member name="M:NCS.Business.Log.Log2File`2.Add(System.String,System.String,`0,`1,System.String,System.String,System.String)">
            <summary>
            添加一条Log
            </summary>
            <param name="userid">操作人</param>
            <param name="role">操作人权限</param>
            <param name="type">Log类型</param>
            <param name="state">操作状态</param>
            <param name="tableobject">操作的数据对象/数据表名</param>
            <param name="comments">Log说明</param>
            <param name="details">附加信息,诸如修改了哪些字段等</param>
        </member>
        <member name="M:NCS.Business.Log.Log2File`2.Add(System.String,`0,`1,System.String)">
            <summary>
            添加一条Log
            </summary>
            <param name="userid">操作人</param>
            <param name="state">操作状态</param>
            <param name="type">Log类型</param>
            <param name="comments">Log说明</param>
        </member>
        <member name="M:NCS.Business.Log.Log2File`2.Add(`0,`1,System.String)">
            <summary>
            添加一条Log
            </summary>
            <param name="type">Log类型</param>
            <param name="state">操作状态</param>
            <param name="comments">Log说明</param>
        </member>
        <member name="M:NCS.Business.Log.Log2File`2.Add(`0,System.String)">
            <summary>
            添加一条Log
            </summary>
            <param name="type">Log类型</param>
            <param name="comments">Log说明</param>
        </member>
        <member name="P:NCS.Business.Log.Log2File`2.EnabledType">
            <summary>
            获取或设置一个值,表示哪些Log会被记录在案
            </summary>
        </member>
        <member name="P:NCS.Business.Log.Log2File`2.DataSource">
            <summary>
            获取或设置一个值,表示将log写入哪个文件。更改时，将自动保存并关闭之前的文件。
            如果要定时更换Log文件，可直接修改本属性值。
            </summary>
        </member>
        <member name="M:NCS.Business.Log.Log2File`2.Dispose">
            <summary>
            释放占用的资源，请在退出程序时，务必执行本方法
            </summary>
        </member>
        <member name="F:NCS.Business.WindowsServiceDebugWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.Business.WindowsServiceDebugWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.Business.WindowsServiceDebugWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.Cache.CacheBase`1">
            <summary>
            缓存基类，根据设置更新缓存数据，并提供缓存数据功能；#注意#不要直接创建缓存对象，对缓存类的访问，应由CacheManager处理
            </summary>
            <typeparam name="M">被缓存的数据类型，需要是EntityViewBase的子类</typeparam>
        </member>
        <member name="M:NCS.Cache.CacheBase`1.#ctor">
            <summary>
            构造函数，可以在这里初始化各个参数
            </summary>
        </member>
        <member name="E:NCS.Cache.CacheBase`1.CacheDataUpdated">
            <summary>
            当缓存数据被更新后触发
            </summary>
        </member>
        <member name="P:NCS.Cache.CacheBase`1.AutoClearCacheWhenUpdate">
            <summary>
            当更新缓存时，是否自动清除缓存。默认为true，只有当需要手工增量/分批更新缓存时才需要设为false。
            </summary>
        </member>
        <member name="M:NCS.Cache.CacheBase`1.OnCacheDataUpdated">
            <summary>
            触发CacheDataUpdated事件，可以在子类中重写，附加额外逻辑
            </summary>
        </member>
        <member name="P:NCS.Cache.CacheBase`1.DataUpdateMode">
            <summary>
            缓存数据更新模式
            </summary>
        </member>
        <member name="P:NCS.Cache.CacheBase`1.LastDataUpdateTime">
            <summary>
            数据的时间戳，为数据的最近更新时间
            </summary>
        </member>
        <member name="P:NCS.Cache.CacheBase`1.DataExpireTime">
            <summary>
            定义数据超时时间，如5分钟后超时
            </summary>
        </member>
        <member name="P:NCS.Cache.CacheBase`1.DataUpdateMark">
            <summary>
            数据更新标志，当更新模式包含标志位更新时，若值为true，则立即更新缓存数据
            </summary>
        </member>
        <member name="P:NCS.Cache.CacheBase`1.InvokeCount">
            <summary>
            调用计数器，表明被缓存的数据在其生命周期内被调用的次数
            </summary>
        </member>
        <member name="P:NCS.Cache.CacheBase`1.CacheData">
            <summary>
            获取缓存数据，并自动根据更新模式和参数更新缓存
            </summary>
        </member>
        <member name="M:NCS.Cache.CacheBase`1.CloneCacheData">
            <summary>
            获取缓存数据的副本
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Cache.CacheBase`1.FillCacheDataFromDAL(System.Collections.Generic.IList{`0})">
            <summary>
            需要实现，用于缓存从物理存储中获取完整待缓存数据的方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Cache.CacheBase`1.CheckCondtionInCacheRange(NCS.DataAccess.QuerySubConditions)">
            <summary>
            检查提供的条件，是否在缓存范围内
            </summary>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Cache.CacheBase`1.CustomCheckIsExpire">
            <summary>
            判断当前缓存是否需要刷新，仅当缓存模式设置为Custom时会使用该方法判断
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCS.Cache.CacheManager">
            <summary>
            缓存管理器，为继承自CacheBase的缓存提供可靠的单例模式
            </summary>
        </member>
        <member name="M:NCS.Cache.CacheManager.GetInstance``2">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="C">缓存类</typeparam>
            <typeparam name="M">实体类</typeparam>
            <returns></returns>
        </member>
        <member name="T:NCS.Cache.CacheUpdateMode">
            <summary>
            缓存模式
            </summary>
        </member>
        <member name="F:NCS.Cache.CacheUpdateMode.NoCache">
            <summary>
            无缓存
            </summary>
        </member>
        <member name="F:NCS.Cache.CacheUpdateMode.Timing">
            <summary>
            定时更新
            </summary>
        </member>
        <member name="F:NCS.Cache.CacheUpdateMode.Mark">
            <summary>
            标志位指定更新
            </summary>
        </member>
        <member name="F:NCS.Cache.CacheUpdateMode.TimeStamp">
            <summary>
            时间戳，每次调用更新时间戳，通常与定时更新联合使用
            </summary>
        </member>
        <member name="F:NCS.Cache.CacheUpdateMode.Custom">
            <summary>
            自定义，通过实现 CustomCheckIsExpire() 函数实现
            </summary>
        </member>
        <member name="T:NCS.Cache.FakeCache`1">
            <summary>
            假Cache对象，主要针对实际不需要缓存但需要缓存对象的场景（如为了使用PDL对象，但不需要使用Cache）
            </summary>
            <typeparam name="M"></typeparam>
        </member>
        <member name="P:NCS.Cache.FakeCache`1.DataUpdateMode">
            <summary>
            返回无缓存
            </summary>
        </member>
        <member name="M:NCS.Cache.FakeCache`1.FillCacheDataFromDAL(System.Collections.Generic.IList{`0})">
            <summary>
            清空缓存
            </summary>
            <param name="cachelist"></param>
        </member>
        <member name="M:NCS.Cache.FakeCache`1.CheckCondtionInCacheRange(NCS.DataAccess.QuerySubConditions)">
            <summary>
            永远返回否，指定条件不在缓存中
            </summary>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.Controls.BranchDataBase">
            <summary>
            提供编辑Branch对应数据库连接信息的方法，注意，本控件使用了多线程操作。
            </summary>
        </member>
        <member name="E:NCS.Controls.BranchDataBase.ConnectionListChanged">
            <summary>
            当连接串列表变动时触发（如载入列表，添加，编辑或删除等情况）
            </summary>
        </member>
        <member name="E:NCS.Controls.BranchDataBase.ConnectionChanged">
            <summary>
            当单个连接串变动时触发(修改) 
            </summary>
        </member>
        <member name="M:NCS.Controls.BranchDataBase.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:NCS.Controls.BranchDataBase.DisplayConnectionString">
            <summary>
            显示连接串时是否显示明文
            </summary>
        </member>
        <member name="P:NCS.Controls.BranchDataBase.KeyName">
            <summary>
            或取或设置连接串的Key在UI上显示的文本，默认为 Branch
            </summary>
        </member>
        <member name="M:NCS.Controls.BranchDataBase.DataBind">
            <summary>
            重新载入连接串数据
            </summary>
        </member>
        <member name="F:NCS.Controls.BranchDataBase.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.Controls.BranchDataBase.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.Controls.BranchDataBase.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.Controls.ConnectionChangeEvent">
            <summary>
            当修改链接串时触发
            </summary>
        </member>
        <member name="P:NCS.Controls.ConnectionChangeEvent.Key">
            <summary>
            获取被修改的连接串的Key
            </summary>
        </member>
        <member name="P:NCS.Controls.ConnectionChangeEvent.NewConnectionString">
            <summary>
            获取新的连接串
            </summary>
        </member>
        <member name="P:NCS.Controls.ConnectionChangeEvent.OldConnectionString">
            <summary>
            获取旧的连接串 
            </summary>
        </member>
        <member name="F:NCS.Controls.CommandObjectEdit.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.Controls.CommandObjectEdit.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.Controls.CommandObjectEdit.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.Controls.ConfigToolAddin">
            <summary>
            提供配置工具可自动调用自定义配置页的基类，必须重写 Title 属性！
            </summary>
        </member>
        <member name="M:NCS.Controls.ConfigToolAddin.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:NCS.Controls.ConfigToolAddin.Title">
            <summary>
            必须重写，将在配置工具选项卡中显示的配置内容名称
            </summary>
        </member>
        <member name="M:NCS.Controls.ConfigToolAddin.CanUse">
            <summary>
            若对于是否允许配置有特殊逻辑，可重写此方法，若返回false，则不会开放该配置控件给用户。
            </summary>
            <returns></returns>
        </member>
        <member name="P:NCS.Controls.ConfigToolAddin.DisplayPassword">
            <summary>
            获取或设置，显性显示密码与否，继承的控件可以更具此属性决定密码是否显示在界面上
            </summary>
        </member>
        <member name="F:NCS.Controls.ConfigToolAddin.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.Controls.ConfigToolAddin.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.Controls.ConfigToolAddin.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.Controls.ControlArray">
            <summary>
            表示控件数组的容器
            </summary>
        </member>
        <member name="M:NCS.Controls.ControlArray.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:NCS.Controls.ControlArray.#ctor(System.ComponentModel.IContainer)">
            <summary>
            构造
            </summary>
            <param name="container"></param>
        </member>
        <member name="P:NCS.Controls.ControlArray.Count">
            <summary>
            获取或设置需要的空间数量，（赋值操作仅在设计模式下有效）
            </summary>
        </member>
        <member name="P:NCS.Controls.ControlArray.ControlType">
            <summary>
            控件类型
            </summary>
        </member>
        <member name="M:NCS.Controls.ControlArray.BuildControls">
            <summary>
            构造所有控件
            </summary>
        </member>
        <member name="F:NCS.Controls.ControlArray.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.Controls.ControlArray.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.Controls.ControlArray.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:NCS.Controls.frmInputBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.Controls.frmInputBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.Controls.frmInputBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.Controls.ListEditor">
            <summary>
            Provide a UI to Add/Edit string list.
            </summary>
        </member>
        <member name="M:NCS.Controls.ListEditor.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:NCS.Controls.ListEditor.ToUpper">
            <summary>
            是否自动转换为大写字符
            </summary>
        </member>
        <member name="P:NCS.Controls.ListEditor.TextBox">
            <summary>
            包含的TextBoxWithFormat对象
            </summary>
        </member>
        <member name="P:NCS.Controls.ListEditor.RegexFormat">
            <summary>
            Get or set the format RegularExpressions for textbox's input.
            </summary>
        </member>
        <member name="P:NCS.Controls.ListEditor.ErrorFormatColor">
            <summary>
            Get or set the color when text got invalid format.
            </summary>
        </member>
        <member name="P:NCS.Controls.ListEditor.ErrorProvider">
            <summary>
            Get or set the ErrorProvider control when text got invalid format.
            </summary>
        </member>
        <member name="P:NCS.Controls.ListEditor.ErrorMessage">
            <summary>
            Get or set the Error Message when text got invalid format.(if ErrorProvider is null, this property will be ignored.)
            </summary>
        </member>
        <member name="M:NCS.Controls.ListEditor.DataBind(System.String[])">
            <summary>
            Set the list with param: list[].
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:NCS.Controls.ListEditor.ItemsText">
            <summary>
            Get or set the List Items.
            </summary>
        </member>
        <member name="P:NCS.Controls.ListEditor.ItemsAdded">
            <summary>
            Get the list items which were added after last DataBind/set ItemsText
            </summary>
        </member>
        <member name="P:NCS.Controls.ListEditor.ItemsRemoved">
            <summary>
            Get the list items which were deleted after last DataBind/set ItemsText
            </summary>
        </member>
        <member name="F:NCS.Controls.ListEditor.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.Controls.ListEditor.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.Controls.ListEditor.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.Controls.ServerCredential">
            <summary>
            提供一个简单的编辑界面，允许用户编辑一个和服务器/端口/认证用户相关的内容
            </summary>
        </member>
        <member name="P:NCS.Controls.ServerCredential.Server">
            <summary>
            获取或设置服务器框输入的内容
            </summary>
        </member>
        <member name="P:NCS.Controls.ServerCredential.Port">
            <summary>
            获取或设置端口框中输入的内容
            </summary>
        </member>
        <member name="P:NCS.Controls.ServerCredential.UserName">
            <summary>
            获取或设置用户名框中的信息
            </summary>
        </member>
        <member name="P:NCS.Controls.ServerCredential.Password">
            <summary>
            获取或设置密码框中的内容
            </summary>
        </member>
        <member name="P:NCS.Controls.ServerCredential.SSL">
            <summary>
            获取或设置SSL复选框的状态
            </summary>
        </member>
        <member name="M:NCS.Controls.ServerCredential.GetWebProxy">
            <summary>
            根据界面中的输入，获取一个代理服务器对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Controls.ServerCredential.GetCredential">
            <summary>
            根据界面输入，获取一个默认验证方法实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:NCS.Controls.ServerCredential.PortEnabled">
            <summary>
            获取端口输入框状态，是否将该框禁用
            </summary>
        </member>
        <member name="P:NCS.Controls.ServerCredential.SSLVisible">
            <summary>
            获取SSL复选框状态，是否将该框隐藏
            </summary>
        </member>
        <member name="F:NCS.Controls.ServerCredential.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.Controls.ServerCredential.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.Controls.ServerCredential.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.Controls.TextBoxFileSelect">
            <summary>
            A UserControl has a textbox and a button. could be show a file/folder select dlg and get the selected path.
            Created by: Wu Ji Qing
            Created date: 2007/12/27
            </summary>
        </member>
        <member name="E:NCS.Controls.TextBoxFileSelect.BeforeBrowser">
            <summary>
            在执行查询之前，允许传入一个模拟用户凭据，从而使用该凭据的权限执行文件操作。
            </summary>
        </member>
        <member name="T:NCS.Controls.TextBoxFileSelect.ShowDialogMode">
            <summary>
            选择对话框的类型，保存文件/打开文件/选择文件夹
            </summary>
        </member>
        <member name="F:NCS.Controls.TextBoxFileSelect.ShowDialogMode.SaveFile">
            <summary>
            保存文件对话框
            </summary>
        </member>
        <member name="F:NCS.Controls.TextBoxFileSelect.ShowDialogMode.OpenFile">
            <summary>
            打开文件对话框
            </summary>
        </member>
        <member name="F:NCS.Controls.TextBoxFileSelect.ShowDialogMode.SelectFolder">
            <summary>
            选择文件家对话框
            </summary>
        </member>
        <member name="T:NCS.Controls.TextBoxFileSelect.EndWithSlash">
            <summary>
            文件夹选择模式下，返回路径是否以斜杠结束，是/否/由系统决定
            </summary>
        </member>
        <member name="F:NCS.Controls.TextBoxFileSelect.EndWithSlash.Yes">
            <summary>
            以斜杠结束
            </summary>
        </member>
        <member name="F:NCS.Controls.TextBoxFileSelect.EndWithSlash.No">
            <summary>
            不以斜杠结束
            </summary>
        </member>
        <member name="F:NCS.Controls.TextBoxFileSelect.EndWithSlash.System">
            <summary>
            由系统决定，默认值
            </summary>
        </member>
        <member name="E:NCS.Controls.TextBoxFileSelect.PathChanged">
            <summary>
            Invoke when the path changed.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.ReadOnly">
            <summary>
            Get or set path textbox can be modified by user.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.PathEndWithSlash">
            <summary>
            Get or set path end with slash(\).
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.Path">
            <summary>
            Get or set path value.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.DialogMode">
            <summary>
            Get or set select path dialog mode, like savefile/openfile/selectfolder...
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.DropDownStyle">
            <summary>
            Get or set edit box style. dropdownlist or normal textbox
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.Items">
            <summary>
            Get the item list of comboxbox.
            </summary>
        </member>
        <member name="M:NCS.Controls.TextBoxFileSelect.CheckExist">
            <summary>
            check the path is exist or not.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.SaveDialogInstance">
            <summary>
            Get or set the save file dialog instance. if keep it null, will created a instance with default property.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.OpenDialogInstance">
            <summary>
            Get or set the open file dialog instance. if keep it null, will created a instance with default property.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.FolderDialogInstance">
            <summary>
            Get or set the folder dialog instance. if keep it null, will created a instance with default property.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxFileSelect.BackgroundColor">
            <summary>
            Get or set the textbox's background color.
            </summary>
        </member>
        <member name="M:NCS.Controls.TextBoxFileSelect.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:NCS.Controls.TextBoxFileSelect.OnLoad(System.EventArgs)">
            <summary>
            当载入控件时触发
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NCS.Controls.TextBoxFileSelect.GetFileIcon(System.String,System.Boolean)">
            <summary>
            从文件扩展名得到文件关联图标
            </summary>
            <param name="fileName">文件名或文件扩展名</param>
            <param name="smallIcon">是否是获取小图标，否则是大图标</param>
            <returns>图标</returns>
        </member>
        <member name="M:NCS.Controls.TextBoxFileSelect.OnGotFocus(System.EventArgs)">
            <summary>
            已重写，当获取焦点时发生
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NCS.Controls.TextBoxFileSelect.SelectText">
            <summary>
            选择当前文本框内的文本
            </summary>
        </member>
        <member name="F:NCS.Controls.TextBoxFileSelect.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.Controls.TextBoxFileSelect.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.Controls.TextBoxFileSelect.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.Controls.RequireImpersionalEventArgs">
            <summary>
            当文件操作可能需要模拟权限时触发，设置IdentityImpersonation为null或模拟账户对象实例。
            </summary>
        </member>
        <member name="F:NCS.Controls.RequireImpersionalEventArgs.Cancel">
            <summary>
            设置为true可以取消此后续过程
            </summary>
        </member>
        <member name="P:NCS.Controls.RequireImpersionalEventArgs.IdentityImpersonation">
            <summary>
            设置为null或模拟账户实例，相关操作将使用该凭据操作。
            </summary>
        </member>
        <member name="T:NCS.Controls.TextBoxWithFormat">
            <summary>
            Std TextBox Control with format check property.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxWithFormat.RegexFormat">
            <summary>
            Get or set the format RegularExpressions for textbox's input.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxWithFormat.MaxLengthForUnicode">
            <summary>
            Get or set the maxlength for char or byte. False for char, True for byte.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxWithFormat.ErrorFormatColor">
            <summary>
            Get or set the color when text got invalid format.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxWithFormat.ErrorProvider">
            <summary>
            Get or set the ErrorProvider control when text got invalid format.
            </summary>
        </member>
        <member name="P:NCS.Controls.TextBoxWithFormat.ErrorMessage">
            <summary>
            Get or set the Error Message when text got invalid format.(if ErrorProvider is null, this property will be ignored.)
            </summary>
        </member>
        <member name="M:NCS.Controls.TextBoxWithFormat.OnMouseLeave(System.EventArgs)">
            <summary>
            Override, when mouse leave, refresh.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NCS.Controls.TextBoxWithFormat.OnLostFocus(System.EventArgs)">
            <summary>
            Override, when lost focus, check the text's format.
            </summary>
        </member>
        <member name="M:NCS.Controls.TextBoxWithFormat.OnGotFocus(System.EventArgs)">
            <summary>
            Override, change the forecolor back when got focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NCS.Controls.TextBoxWithFormat.OnTextChanged(System.EventArgs)">
            <summary>
            Override, when text changed, check the text's format.
            </summary>
        </member>
        <member name="M:NCS.Controls.TextBoxWithFormat.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override, when mouse moved, show char length.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:NCS.Controls.TextBoxWithFormat.ValidFormat">
            <summary>
            Get or set the format RegularExpressions for textbox's input.
            </summary>
        </member>
        <member name="T:NCS.DataAccess.CommandResouce">
            <summary>
            提供外部的命令文件，从而可以将诸如非存贮过程的SQL语句与程序代码分离，便于更新命令语句而不需要更新程序本身。
            </summary>
        </member>
        <member name="P:NCS.DataAccess.CommandResouce.FileName">
            <summary>
            包含命令的文件名
            </summary>
        </member>
        <member name="P:NCS.DataAccess.CommandResouce.Password">
            <summary>
            加密使用的密码
            </summary>
        </member>
        <member name="P:NCS.DataAccess.CommandResouce.Items">
            <summary>
            所有命令对象
            </summary>
        </member>
        <member name="M:NCS.DataAccess.CommandResouce.#ctor(System.String,System.String)">
            <summary>
            构造函数，允许指定包含命令对象的文件，并指定密码
            </summary>
            <param name="file">文件名，若存在，则载入所有内容，否则创建空命令列表</param>
            <param name="password">用来加密解密的密码</param>
        </member>
        <member name="M:NCS.DataAccess.CommandResouce.Save">
            <summary>
            保存命令列表到FileName指定的文件，密码由Password属性指定
            </summary>
        </member>
        <member name="P:NCS.DataAccess.CommandResouce.Item(System.String,System.Int32)">
            <summary>
            获取符合要求的命令
            </summary>
            <param name="key">命令对象的key</param>
            <param name="role">权限</param>
            <returns>命令</returns>
        </member>
        <member name="P:NCS.DataAccess.CommandResouce.Item(System.String)">
            <summary>
            获取符合要求的命令
            </summary>
            <param name="key">命令对象的key</param>
            <returns>命令对象</returns>
        </member>
        <member name="T:NCS.DataAccess.CommandObjectList">
            <summary>
            命令对象集合
            </summary>
        </member>
        <member name="M:NCS.DataAccess.CommandObjectList.Add(NCS.DataAccess.CommandObject)">
            <summary>
            添加新命令对象到列表末尾
            </summary>
            <param name="item">要添加的对象</param>
        </member>
        <member name="M:NCS.DataAccess.CommandObjectList.Insert(System.Int32,NCS.DataAccess.CommandObject)">
            <summary>
            在指定位置，插入一个命令对象
            </summary>
            <param name="index">要插入对象的位置</param>
            <param name="item">要插入的对象</param>
        </member>
        <member name="T:NCS.DataAccess.CommandObject">
            <summary>
            命令对象，可以包含命令，权限，key，备注
            </summary>
        </member>
        <member name="M:NCS.DataAccess.CommandObject.#ctor(System.String,System.String,System.Int32)">
            <summary>
            创建新的命令对象
            </summary>
            <param name="key">key</param>
            <param name="command">命令行</param>
            <param name="role">权限</param>
        </member>
        <member name="P:NCS.DataAccess.CommandObject.Command">
            <summary>
            获取或设置命令行
            </summary>
        </member>
        <member name="P:NCS.DataAccess.CommandObject.Key">
            <summary>
            获取命令行的key
            </summary>
        </member>
        <member name="P:NCS.DataAccess.CommandObject.Role">
            <summary>
            获取或设置需要的权限
            </summary>
        </member>
        <member name="P:NCS.DataAccess.CommandObject.Memo">
            <summary>
            获取或设置备注信息
            </summary>
        </member>
        <member name="M:NCS.DataAccess.CommandObject.ToString">
            <summary>
            将命令对象转换为字符串，已重写，返回Commond属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.CommandObject.HasRole(System.Int32)">
            <summary>
            本命令行对象是否完全符合指定的权限
            </summary>
            <param name="role">是否完全符合改权限</param>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.CommandObject.GetHashCode">
            <summary>
            返回Object对象的hash值，
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.CommandObject.Equals(System.Object)">
            <summary>
            指定的对象是否与自身相等，已重载，仅对比key
            </summary>
            <param name="obj">要对比的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:NCS.DataAccess.CommandObject.op_Equality(NCS.DataAccess.CommandObject,NCS.DataAccess.CommandObject)">
            <summary>
            判断2个命令对象是否相等
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.CommandObject.op_Inequality(NCS.DataAccess.CommandObject,NCS.DataAccess.CommandObject)">
            <summary>
            判断2个命令对象是否不相等
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.DataAccess.IDataMappingClass">
            <summary>
            数据库表隐射为C#类的接口标准，建议重写==,!=等操作符
            </summary>
        </member>
        <member name="P:NCS.DataAccess.IDataMappingClass.ID">
            <summary>
            ID自增主键
            </summary>
        </member>
        <member name="M:NCS.DataAccess.IDataMappingClass.Update">
            <summary>
            更新对象到数据库
            </summary>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:NCS.DataAccess.IDataMappingClass.Delete">
            <summary>
            删除数据库中对应PKID的纪录
            </summary>
            <returns>删除是否成功</returns>
        </member>
        <member name="M:NCS.DataAccess.IDataMappingClass.AddNew">
            <summary>
            添加对象到数据库
            </summary>
            <returns>添加是否成功</returns>
        </member>
        <member name="M:NCS.DataAccess.IDataMappingClass.GetCount">
            <summary>
            返回总记录行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.IDataMappingClass.Save(System.Data.DataRow)">
            <summary>
            将所有字段保存到一个DataRow列中
            </summary>
            <param name="dr">要保存的数据列的实例，必须与该对象字段完全匹配</param>
        </member>
        <member name="P:NCS.DataAccess.IDataMappingClass.TableName">
            <summary>
            获取该对象关联到数据库的表的名称
            </summary>
        </member>
        <member name="T:NCS.DataAccess.DataBase">
            <summary>
            SQL Server 基本的数据库操作类
            </summary>
        </member>
        <member name="F:NCS.DataAccess.DataBase.sqlstr">
            <summary>
            私有对象，连接对象
            </summary>
        </member>
        <member name="M:NCS.DataAccess.DataBase.CopySqlParameter(System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            私有方法，复制参数到SQL参数列表
            </summary>
            <param name="src">参数数组</param>
            <param name="target">目标参数列表</param>
        </member>
        <member name="P:NCS.DataAccess.DataBase.CommandTimeout">
            <summary>
            获取或设置命令超时时间
            </summary>
        </member>
        <member name="P:NCS.DataAccess.DataBase.XACT_ABORT">
            <summary>
            获取或设置执行命令前是否打开XACT_ABORT on
            </summary>
        </member>
        <member name="P:NCS.DataAccess.DataBase.FillDataTableWithConstraint">
            <summary>
            获取或设置 填充DataTable时，是否也加入相应的约束
            </summary>
        </member>
        <member name="M:NCS.DataAccess.DataBase.TestConnection">
            <summary>
            测试数据库连接，检查间接是否正常。请勿频繁执行本操作。
            </summary>
            <returns>连接是否正常</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.TestConnection(System.String)">
            <summary>
            测试数据库连接，检查间接是否正常。请勿频繁执行本操作。
            </summary>
            <param name="connstr">要测试的连接字符串</param>
            <returns>连接是否正常</returns>
        </member>
        <member name="P:NCS.DataAccess.DataBase.ServerVersion">
            <summary>
            获取当前连接的服务器的版本
            版本的格式为 ##.##.####，其中前两位是主版本，中间两位是次版本，最后四位是发布版本。该字符串的格式为 major.minor.build，其中 major 和 minor 必须为两位数，build 必须为四位数。
            </summary>
        </member>
        <member name="P:NCS.DataAccess.DataBase.ConnectionState">
            <summary>
            获取当前连接的状态，若未初始化连接，将返回 ConnectionState.Broken
            </summary>
        </member>
        <member name="P:NCS.DataAccess.DataBase.CommandType">
            <summary>
            命令类型，SQL语句或存储过程
            </summary>
        </member>
        <member name="M:NCS.DataAccess.DataBase.CommandTypeForOnce(System.Data.CommandType)">
            <summary>
            仅在下次执行SQL语句时，适用该类型，执行后，立即恢复 CommandType 属性的设置。
            如：整个程序仅很1，2处需要执行存储过程时，可以考虑适用此方法。
            </summary>
            <param name="type">CommandType类型</param>
        </member>
        <member name="P:NCS.DataAccess.DataBase.ConnectionString">
            <summary>
            返回当前的连接串
            </summary>
        </member>
        <member name="P:NCS.DataAccess.DataBase.DataBaseName">
            <summary>
            获取当前数据库名称
            </summary>
        </member>
        <member name="M:NCS.DataAccess.DataBase.InitConnection(System.String)">
            <summary>
            初始化连接串
            </summary>
            <param name="ConnString">数据连接串</param>
        </member>
        <member name="M:NCS.DataAccess.DataBase.InitConnection">
            <summary>
            初始化连接串，使用 connectionStrings 小节的Default连接串 
            </summary>
        </member>
        <member name="M:NCS.DataAccess.DataBase.InitConnection(System.Int32)">
            <summary>
            初始化连接串，使用 connectionStrings 小节的指定连接串 
            </summary>
        </member>
        <member name="M:NCS.DataAccess.DataBase.ClearPoolIfNecessary(System.Exception,System.Data.SqlClient.SqlConnection)">
            <summary>
            检查异常类型，如果有必要，将指定连接对象移除出连接池，该函数需要不断完善，目前仅认为以下异常为必要：
            
            从数据库中查询出错信息对应id的代码：SELECT * FROM master.dbo.sysmessages
            
            1025 Transaction (Process ID %d) was deadlocked on %.*ls resources with another process and has been chosen as the deadlock victim. Rerun the transaction.
            3989 New request is not allowed to start because it should come with valid transaction descriptor.
            18056 The client was unable to reuse a session with SPID %d, which had been reset for connection pooling. The failure ID is %d. This error may have been caused by an earlier operation failing. Check the error logs for failed operations immediately before this e
            18061 The client was unable to join a session with SPID %d. This error may have been caused by an earlier operation failing or a change in permissions since the session was established. Check the error logs for failed operations immediately before this error me
            </summary>
            <param name="ex">异常</param>
            <param name="conn">连接对象</param>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLCommand(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="cmdtype">执行命令类型，存储过程或是sql语句</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>改变的数据条数</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLCommand(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>改变的数据条数</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLObject(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的首行首列
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="cmdtype">执行命令类型，存储过程或是sql语句</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的首行首列</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLObject(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的首行首列
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的首行首列</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLReader(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集 Reader 对象，返回null表示查询发生异常，千万记住用完及时关闭Reader对象
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="cmdtype">执行命令类型，存储过程或是sql语句</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集 Reader 对象</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集 Reader 对象，返回null表示查询发生异常，千万记住用完及时关闭Reader对象
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集 Reader 对象</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.CloseConnection">
            <summary>
            手动关闭数据连接，不再适用，DataBase类当前为每个操作创建一个链接。
            </summary>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLTable(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的 DataTable
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="cmdtype">执行命令类型，存储过程或是sql语句</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的 DataTable</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLTable(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的 DataTable
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的 DataTable</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLDataSet(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的 DataSet
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="cmdtype">执行命令类型，存储过程或是sql语句</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的 DataSet</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.DoSQLDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的 DataSet
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的 DataSet</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.GetValue``1(System.Data.DataTable,System.String,``0)">
            <summary>
            泛型方法，返回DataTabel首行某列的数据的强类型数据，同时，将检查数据是否为空或无效（此时返回默认值）
            </summary>
            <typeparam name="T">将返回的数据类型</typeparam>
            <param name="dt">DataTabel 数据表</param>
            <param name="colname">列名称</param>
            <param name="defaultvalue">默认值</param>
            <returns>强类型数据</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.GetValue``1(System.Data.DataRow,System.String,``0)">
            <summary>
            泛型方法，返回DataRow某列的数据的强类型数据，同时，将检查数据是否为空或无效（此时返回默认值）
            </summary>
            <typeparam name="T">将返回的数据类型</typeparam>
            <param name="dr">DataRow 数据表的某列</param>
            <param name="colname">列名称</param>
            <param name="defaultvalue">默认值</param>
            <returns>强类型数据</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.GetValue``1(System.Object,``0)">
            <summary>
            泛型方法，返回一个被装箱的数据的强类型值，同时，将检查数据是否为空或无效（此时返回默认值）
            </summary>
            <typeparam name="T">将返回的数据类型</typeparam>
            <param name="dbobj">被装箱的数据</param>
            <param name="defaultvalue">默认值</param>
            <returns>强类型数据</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.BlukCopy(System.Data.DataRow[],System.String,System.Int32,System.Int32)">
            <summary>
            将数据写入指定的数据库表中
            </summary>
            <param name="dr">要写入数据库的数据行</param>
            <param name="batchsize">批量写入的数目，默认50</param>
            <param name="timeout">超时时间，默认30秒</param>
            <param name="targettablename">目标数据表</param>
        </member>
        <member name="M:NCS.DataAccess.DataBase.GetLockInfomation">
            <summary>
            获取当前所有数据库锁信息
            </summary>
            <returns>包含数据库锁信息的数组</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.NewSqlParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32)">
            <summary>
            创建SQLParameter对象,并指定变量名，值，SQL数据类型，和大小
            </summary>
            <param name="varname">用户SQL参数的变量名，以@开头，可省略@</param>
            <param name="value">值</param>
            <param name="sqltype">SQL数据类型</param>
            <param name="size">字段长度</param>
            <returns>创建的SqlParameter对象</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.NewSqlParameter(System.String,System.Object,System.Data.SqlDbType)">
            <summary>
            创建SQLParameter对象,并指定变量名，值，SQL数据类型，和大小
            </summary>
            <param name="varname">用户SQL参数的变量名，以@开头，可省略@</param>
            <param name="value">值</param>
            <param name="sqltype">SQL数据类型</param>
            <returns>创建的SqlParameter对象</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.GetArrayFromDataTable``1(System.Data.DataTable,System.Int32,``0[])">
            <summary>
            获取DataTable中指定列的数据,并返回指定类型的数组,若处理失败,将抛出异常
            </summary>
            <typeparam name="T">指定要返回的类型,必须与指定的列类型相同</typeparam>
            <param name="dt">数据源</param>
            <param name="columnIndex">指定的列的索引</param>
            <param name="exceptValues">排除的项目,若有值与包含的内容相等,将不被返回</param>
            <returns>返回的数组</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.GetArrayFromDataTable``1(System.Data.DataTable,System.String,``0[])">
            <summary>
            获取DataTable中指定列的数据,并返回指定类型的数组,若处理失败,将抛出异常
            </summary>
            <typeparam name="T">指定要返回的类型,必须与指定的列类型相同</typeparam>
            <param name="dt">数据源</param>
            <param name="column">指定的列的名称</param>
            <param name="exceptValues">排除的项目,若有值与包含的内容相等,将不被返回</param>
            <returns>返回的数组</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.BuildInitDataSQL(System.Data.DataRow[],System.String)">
            <summary>
            通过已有数据，生成用来创建基础数据的SQL语句
            </summary>
            <param name="dr">数据行</param>
            <param name="TableName">表名</param>
            <returns>可以创建基础数据的SQL语句</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.BuildInitDataSQL(System.Data.DataTable,System.String)">
            <summary>
            通过已有数据，生成用来创建基础数据的SQL语句
            </summary>
            <param name="dt">数据表</param>
            <param name="TableName">表名</param>
            <returns>可以创建基础数据的SQL语句</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.BuildInitDataSQL(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            通过SQL查询，生成用来创建基础数据的SQL语句
            </summary>
            <param name="sql">一句select查询</param>
            <param name="p">参数数组</param>
            <returns>可以创建基础数据的SQL语句</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.BatchDeleteData(System.String,System.Int32)">
            <summary>
            批量删除数据，防止一次性删除数据过多，导致超时，
            </summary>
            <param name="sqlcmd">删除语句</param>
            <param name="batchsize">批次大小，取值范围10-5000，建议2000左右</param>
            <returns>删除的数据行数</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.SaveTable(System.Data.DataTable,System.String,System.Boolean,System.Boolean,System.Text.Encoding,System.String[],System.String[],System.String[])">
            <summary>
            将DataTable数据保存为csv文件
            </summary>
            <param name="dt">数据源</param>
            <param name="filename">要保存的文件名</param>
            <param name="needtitle">CSV需要标题列</param>
            <param name="append">追加模式添加</param>
            <param name="encoding">csv文件编码</param>
            <param name="columnsdisplay">字段显示内容</param>
            <param name="columns">要导出的字段</param>
            <param name="formats">导出字段个格式</param>
        </member>
        <member name="M:NCS.DataAccess.DataBase.SaveTable(System.Data.DataTable,System.IO.Stream,System.Boolean,System.Boolean,System.Text.Encoding,System.String[],System.String[],System.String[])">
            <summary>
            将DataTable数据保存为csv文件
            </summary>
            <param name="dt">数据源</param>
            <param name="sm">要保存数据的流</param>
            <param name="needtitle">CSV需要标题列</param>
            <param name="append">追加模式添加</param>
            <param name="encoding">csv文件编码</param>
            <param name="columnsdisplay">字段显示内容</param>
            <param name="columns">要导出的字段</param>
            <param name="formats">导出字段个格式</param>
        </member>
        <member name="M:NCS.DataAccess.DataBase.SaveTable(System.Data.DataTable,System.Boolean,System.String[],System.String[],System.String[])">
            <summary>
            将DataTable数据保存为csv文件
            </summary>
            <param name="dt">数据源</param>
            <param name="needtitle">CSV需要标题列</param>
            <param name="encoding">csv文件编码</param>
            <param name="columnsdisplay">字段显示内容</param>
            <param name="columns">要导出的字段</param>
            <param name="formats">导出字段个格式</param>
            <returns>包含转换后字符串的StringBuilder对象</returns>
        </member>
        <member name="M:NCS.DataAccess.DataBase.SaveTable(System.Data.DataTable,System.String,System.Boolean,System.Boolean,System.Text.Encoding,System.String[],System.String[])">
            <summary>
            将DataTable数据保存为csv文件
            </summary>
            <param name="dt">数据源</param>
            <param name="filename">要保存的文件名</param>
            <param name="needtitle">CSV需要标题列</param>
            <param name="append">追加模式添加</param>
            <param name="encoding">csv文件编码</param>
            <param name="columns">要导出的字段</param>
            <param name="formats">导出字段个格式</param>
        </member>
        <member name="M:NCS.DataAccess.DataBase.SaveTable(System.Data.DataTable,System.String,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            将DataTable数据保存为csv文件
            </summary>
            <param name="dt">数据源</param>
            <param name="filename">要保存的文件名</param>
            <param name="needtitle">CSV需要标题列</param>
            <param name="append">追加模式添加</param>
            <param name="encoding">csv文件编码</param>
        </member>
        <member name="T:NCS.DataAccess.ItemCollection`1">
            <summary>
            泛型数据集，主要用于保存被 映射的数据表代表的类型 的列表
            </summary>
            <typeparam name="T">映射的数据类型</typeparam>
        </member>
        <member name="F:NCS.DataAccess.ItemCollection`1._lstMappingClass">
            <summary>
            用来保存被 映射的数据表代表的类型 的列表
            </summary>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.#ctor(NCS.DataAccess.IDataMappingClass)">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.Insert(System.Int32,`0)">
            <summary>
            插入新对象
            </summary>
            <param name="index">插入的位置</param>
            <param name="item">对象实例</param>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.Add(`0)">
            <summary>
            直接添加对象
            </summary>
            <param name="item">对象实例</param>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.Remove(`0)">
            <summary>
            移除对象
            </summary>
            <param name="item">对象实例</param>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.RemoveAt(System.Int32)">
            <summary>
            移除对象
            </summary>
            <param name="index">索引位置</param>
        </member>
        <member name="P:NCS.DataAccess.ItemCollection`1.Count">
            <summary>
            获取集合中包含的对象数量
            </summary>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.IndexOf(`0)">
            <summary>
            获取指定对象所在对象中的索引位置
            </summary>
            <param name="item">要查找的对象实例</param>
            <returns>索引值，-1表示未找到</returns>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.Contains(`0)">
            <summary>
            是否包含指定对象
            </summary>
            <param name="item">指定的对象</param>
            <returns>是否包含指定对象</returns>
        </member>
        <member name="M:NCS.DataAccess.ItemCollection`1.Clear">
            <summary>
            清除所有对象
            </summary>
        </member>
        <member name="P:NCS.DataAccess.ItemCollection`1.Item(System.Int32)">
            <summary>
            通过索引，返回对应的对象
            </summary>
            <param name="index">索引号</param>
            <returns>对应的对象实例</returns>
        </member>
        <member name="T:NCS.DataAccess.ExceptionSQL">
            <summary>
            执行SQL时抛出的错误，可以包含执行的SQL语句，参数，SqlCommoand对象，事务对象
            </summary>
        </member>
        <member name="M:NCS.DataAccess.ExceptionSQL.#ctor(System.Exception,System.String,System.Data.Common.DbParameter[])">
            <summary>
            创建新异常对象
            </summary>
            <param name="baseEx">InnerException</param>
            <param name="sql">sql语句</param>
            <param name="param">sql参数</param>
        </member>
        <member name="P:NCS.DataAccess.ExceptionSQL.SQL_CommandText">
            <summary>
            获取SQL语句
            </summary>
        </member>
        <member name="P:NCS.DataAccess.ExceptionSQL.Parameters">
            <summary>
            获取SQL参数
            </summary>
        </member>
        <member name="P:NCS.DataAccess.ExceptionSQL.SQL_Command">
            <summary>
            获取或设置SqlCommand对象
            </summary>
        </member>
        <member name="P:NCS.DataAccess.ExceptionSQL.Transaction">
            <summary>
            获取或设置事务对象
            </summary>
        </member>
        <member name="T:NCS.DataAccess.LockInformation">
            <summary>
            用于表现数据库中，“锁”的具体情况，需要sysadmin权限
            </summary>
        </member>
        <member name="T:NCS.DataAccess.LockInformation.LockType">
            <summary>
            锁的类型
            </summary>
        </member>
        <member name="T:NCS.DataAccess.LockInformation.ObjectType">
            <summary>
            对象类型，如 表，存储过程等
            </summary>
        </member>
        <member name="T:NCS.DataAccess.LockInformation.LockMode">
            <summary>
            锁的模式
            </summary>
        </member>
        <member name="T:NCS.DataAccess.LockInformation.LockStatus">
            <summary>
            锁的状态
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.SPID">
            <summary>
            请求锁的进程的数据库引擎 进程 ID (SPID) 号。
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.LockedDataBase">
            <summary>
            被锁的数据库名
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.LockedObjectName">
            <summary>
            被锁对象名
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.LockedObjectType">
            <summary>
            被锁对象类型
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.LockedObjectTypeDescription">
            <summary>
            被锁对象类型的详细说明
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.LongInUser">
            <summary>
            登陆用户名
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.LogInHost">
            <summary>
            登陆主机名
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.Type">
            <summary>
            锁的类型
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.Mode">
            <summary>
            锁的模式
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.ModeDescription">
            <summary>
            锁的模式的详细说明
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.Status">
            <summary>
            锁的状态
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.StatueDescription">
            <summary>
            锁状态的详细描述
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.EventInfo">
            <summary>
            事件状态(如在执行的SQL语句)
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.Resource">
            <summary>
            根据Type决定数据格式
            </summary>
        </member>
        <member name="P:NCS.DataAccess.LockInformation.TypeDescription">
            <summary>
            锁的类型的详细描述
            </summary>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.Kill">
            <summary>
            杀死当前进程
            </summary>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.Kill(System.Int16)">
            <summary>
            杀死指定进程
            </summary>
            <param name="spid">进程ID</param>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.IsLocked(System.String,System.String,NCS.DataAccess.LockInformation[]@)">
            <summary>
            判断对象/表是否被锁定
            </summary>
            <param name="dbname">数据库名</param>
            <param name="objectname">对象名或表名</param>
            <param name="info">用于返回锁定信息的LockInfomation对象的实例</param>
            <returns>是否被锁</returns>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.IsLocked(System.String,NCS.DataAccess.LockInformation[]@)">
            <summary>
            判断对象/表是否被锁定
            </summary>
            <param name="objectname">对象名或表名</param>
            <param name="info">用于返回锁定信息的LockInfomation对象的实例</param>
            <returns>是否被锁</returns>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.IsLocked(System.String)">
            <summary>
            判断对象/表是否被锁定
            </summary>
            <param name="objectname">对象名或表名</param>
            <returns>是否被锁</returns>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.IsLocked(System.String[])">
            <summary>
            判断对象/表是否被锁定
            </summary>
            <param name="objectsname">对象名或表名数组</param>
            <returns>是否有至少一个对象被锁</returns>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.GetLockTypeDescription(NCS.DataAccess.LockInformation.LockType)">
            <summary>
            获取指定锁的类型的详细说明
            </summary>
            <param name="type">锁的类型</param>
            <returns>锁的类型的详细说明</returns>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.GetObjectTypeDescription(NCS.DataAccess.LockInformation.ObjectType)">
            <summary>
            获取指定对象类型的详细描述
            </summary>
            <param name="type">对象类型</param>
            <returns>对象类型的详细描述</returns>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.GetLockModeDescription(NCS.DataAccess.LockInformation.LockMode)">
            <summary>
            获取指定锁的模式的详细描述
            </summary>
            <param name="mode">锁的模式</param>
            <returns>锁的模式的详细描述</returns>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.GetLockStatusDescription(NCS.DataAccess.LockInformation.LockStatus)">
            <summary>
            获取指定锁的状态的详细描述
            </summary>
            <param name="state">锁的状态</param>
            <returns>锁的状态的详细描述</returns>
        </member>
        <member name="M:NCS.DataAccess.LockInformation.ToString">
            <summary>
            已重写，返回当前锁对象的摘要说明
            </summary>
            <returns>当前锁对象的摘要说明，如SPID，数据库名，锁类型等</returns>
        </member>
        <member name="T:NCS.DataAccess.Entity.Utility">
            <summary>
            提供一些针对EntityFramework的扩展方法
            </summary>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.NewContext``1(System.String)">
            <summary>
            通过指定连接串构建符合实际部署环境的DBContext/ObjectContext对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connstr">数据库连接串</param>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.Where``1(System.Collections.Generic.IEnumerable{``0},NCS.DataAccess.QueryConditions,System.Int32@)">
            <summary>
            为Linq2Object（在内存中的实体对象集合提供查询功能）兼容和对QueryConditions条件查询。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.CompileConditions``1(NCS.DataAccess.QuerySubConditions)">
            <summary>
            将 QuerySubConditions 所表述的条件编译为Lambda表达式，并以委托的形式返回
            </summary>
            <typeparam name="T">条件针对的实体类型</typeparam>
            <param name="conditions">条件</param>
            <returns>编译后的条件</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.UpdateEntityWithoutQuery``1(System.Data.Objects.ObjectContext,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            更新数据，但不事先执行查询，注意，使用本方法将更新除了主键之外的所有字段，本方法会调用SaveChanges方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="context">ObjectContext对象</param>
            <param name="list">实体集合</param>
            <returns>更新的行数</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.UpdateEntityWithoutQuery``1(System.Data.Objects.ObjectContext,``0)">
            <summary>
            更新数据，但不事先执行查询，注意，使用本方法将更新除了主键之外的所有字段，本方法会调用SaveChanges方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="context">ObjectContext对象</param>
            <param name="entity">实体对象</param>
            <returns>是否更新完成</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.DeleteEntityWithoutQuery``1(System.Data.Objects.ObjectContext,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            根据主键删除数据，不事先执行查询，本方法会调用SaveChanges方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="context">ObjectContext对象</param>
            <param name="list">实体集合</param>
            <returns>删除的行数</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.DeleteEntityWithoutQuery``1(System.Data.Objects.ObjectContext,``0)">
            <summary>
            根据主键删除数据，不事先执行查询，本方法会调用SaveChanges方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="context">ObjectContext对象</param>
            <param name="entity">实体对象</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.CreateEntityCopyEntityKeyFrom``1(System.Data.Objects.ObjectContext,System.Data.EntityKey)">
            <summary>
            创建指定类型的实体类，并复制一套传入的EntityKey; 被创建的对象主要用于Attach到ObjectContext上
            </summary>
            <typeparam name="T">需要创建的实体类</typeparam>
            <param name="sourceKey">要复制的EntityKey，所属的实体类可以与T不同，但主键必须相同</param>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.BatchUpdate``1(System.Func{System.Data.Objects.ObjectContext},System.Collections.Generic.KeyValuePair{System.String,System.Object}[],NCS.DataAccess.QuerySubConditions,System.Boolean)">
            <summary>
            在不实现查询的前提下，批量更新数据
            </summary>
            <typeparam name="T">需要更新的表所对应的实体类型</typeparam>
            <param name="CreateContext">用于创建包含T的Objectcontext函数的委托</param>
            <param name="fields2update">需要更新的字段/值列表</param>
            <param name="conditions">更新的条件</param>
            <returns>更新的行数</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.BatchUpdate``1(System.Data.Objects.ObjectQuery,System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Boolean)">
            <summary>
            在不事先查询的前提下，删除指定条件的数据
            </summary>
            <typeparam name="T">要删除数据的表对应的实体类型</typeparam>
            <param name="query">包含筛选条件的表达式树</param>
            <param name="fields2update">需要更新的字段/值列表</param>
            <returns>更新的行数</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.BatchDelete``1(System.Func{System.Data.Objects.ObjectContext},NCS.DataAccess.QuerySubConditions,System.Boolean)">
            <summary>
            在不事先查询的前提下，删除指定条件的数据
            </summary>
            <typeparam name="T">要删除数据的表对应的实体类型</typeparam>
            <param name="CreateContext">用于创建包含T的Objectcontext函数的委托</param>
            <param name="conditions">删除数据的筛选条件</param>
            <returns>删除的行数</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.BatchDelete``1(System.Data.Objects.ObjectQuery,System.Boolean)">
            <summary>
            在不事先查询的前提下，删除指定条件的数据，必须单独为本方法分配一个DataContext实例，不能与其他操作共享。
            </summary>
            <typeparam name="T">要删除数据的表对应的实体类型</typeparam>
            <param name="query">删除数据的筛选条件</param>
            <returns>删除的行数</returns>
        </member>
        <member name="M:NCS.DataAccess.Entity.Utility.CreateGuidKeyByEntityKey(System.Data.EntityKey)">
            <summary>
            根据主键创建一个唯一的ID标识。针对GUID主键的对象，返回的就是主键本身，对于其他类型，将根据一定规则生成hash并转换为GUID形式。保证相同内容的主键生成的GUID一致。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.DataAccess.GetBranchConnection">
            <summary>
            该类仅供Citi系统需要多分行配置不同数据库的情况使用，请设置App.Config中的链接串小节，name字段以分行ID命名，如SH，SZ等
            加密方式为DES，密钥和初始化向量为固定值。
            </summary>
        </member>
        <member name="M:NCS.DataAccess.GetBranchConnection.GetConnection(System.String)">
            <summary>
            根据分行名称，来取得对应的数据库连接字符串，若对应的小节不存在，则使用Default小节的配置，若Default小节也不存在，将抛出异常。
            </summary>
            <param name="Branch">分行简称，如SH，HZ，CQ，DL</param>
            <returns>解密后的连接串</returns>
        </member>
        <member name="M:NCS.DataAccess.GetBranchConnection.SaveConnection(System.String,System.String)">
            <summary>
            将明文的连接字符加密后，保存到App.config的相应小节的对应分行下
            </summary>
            <param name="Branch">BranchCode，如SH,HZ,GZ等</param>
            <param name="connectionstring">连接串的明文</param>
        </member>
        <member name="M:NCS.DataAccess.GetBranchConnection.RemoveConnection(System.String)">
            <summary>
            移除指定的Branch连接信息
            </summary>
            <param name="Branch">BranchCode，如SH,HZ,GZ等</param>
        </member>
        <member name="M:NCS.DataAccess.GetBranchConnection.AllConnections">
            <summary>
            获取所有Branch对应的数据连接串的集合
            </summary>
            <returns>所有Branch对应的数据连接串的集合</returns>
        </member>
        <member name="M:NCS.DataAccess.GetBranchConnection.Encrypt(System.String)">
            <summary>
            使用DES加密字符串，请使用 NCS.Tools.QuickEncrypt.EncryptConfig 取代该函数，今后的版本将不再提供本函数。
            </summary>
            <param name="src">要加密的明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:NCS.DataAccess.GetBranchConnection.Decrypt(System.String)">
            <summary>
            解密DES加密后的字符串，请使用 NCS.Tools.QuickEncrypt.DecryptConfig 取代该函数，今后的版本将不再提供本函数。
            </summary>
            <param name="src">要解密的密文</param>
            <returns>明文</returns>
        </member>
        <member name="T:NCS.DataAccess.OleDB">
            <summary>
            OLEDB 基本的数据库操作类
            </summary>
        </member>
        <member name="F:NCS.DataAccess.OleDB.oledbconn">
            <summary>
            私有对象，连接对象
            </summary>
        </member>
        <member name="M:NCS.DataAccess.OleDB.CopyOleDbParameter(System.Data.OleDb.OleDbParameter[],System.Data.OleDb.OleDbParameterCollection)">
            <summary>
            私有方法，复制参数到SQL参数列表
            </summary>
            <param name="src">参数数组</param>
            <param name="target">目标参数列表</param>
        </member>
        <member name="P:NCS.DataAccess.OleDB.CommandType">
            <summary>
            命令类型，SQL语句或存储过程
            </summary>
        </member>
        <member name="M:NCS.DataAccess.OleDB.CommandTypeForOnce(System.Data.CommandType)">
            <summary>
            仅在下次执行SQL语句时，适用该类型，执行后，立即恢复 CommandType 属性的设置。
            如：整个程序仅很1，2处需要执行存储过程时，可以考虑适用此方法。
            </summary>
            <param name="type">CommandType类型</param>
        </member>
        <member name="P:NCS.DataAccess.OleDB.ConnectionString">
            <summary>
            返回当前的连接串
            </summary>
        </member>
        <member name="P:NCS.DataAccess.OleDB.DataBaseName">
            <summary>
            获取当前数据库名称
            </summary>
        </member>
        <member name="M:NCS.DataAccess.OleDB.InitConnection(System.String)">
            <summary>
            初始化连接串
            </summary>
            <param name="ConnString">数据连接串</param>
        </member>
        <member name="M:NCS.DataAccess.OleDB.InitConnection">
            <summary>
            初始化连接串，使用 connectionStrings 小节的第一个连接串 
            </summary>
        </member>
        <member name="M:NCS.DataAccess.OleDB.InitConnection(System.Int32)">
            <summary>
            初始化连接串，使用 connectionStrings 小节的指定连接串 
            </summary>
        </member>
        <member name="M:NCS.DataAccess.OleDB.TestConnection">
            <summary>
            测试数据库连接，检查间接是否正常。请勿频繁执行本操作。
            </summary>
            <returns>连接是否正常</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.TestConnection(System.String)">
            <summary>
            测试数据库连接，检查间接是否正常。请勿频繁执行本操作。
            </summary>
            <param name="connstr">要测试的连接字符串</param>
            <returns>连接是否正常</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.GetTablesName">
            <summary>
            获取当前数据库包含的表的名称列表
            </summary>
            <returns>表的名称列表</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.DoCommand(System.String,System.Boolean,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行指定的SQL语句或存储过程
            </summary>
            <param name="oledbCmdLine">SQL语句或存储过程名</param>
            <param name="connAlwaysOpen">吃否保持Connection对象为打开状态</param>
            <param name="param">包含DB参数的数组，可以为 null</param>
            <returns>改变的数据条数</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.DoObject(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的首行首列
            </summary>
            <param name="oledbCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含DB参数的数组，可以为 null</param>
            <returns>返回数据集的首行首列</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.DoReader(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集 Reader 对象，返回null表示无数据或查询发生异常，务必使用后手动关闭连接
            </summary>
            <param name="oledbCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含DB参数的数组，可以为 null</param>
            <returns>返回数据集 Reader 对象</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.CloseConnection">
            <summary>
            手动关闭数据连接
            </summary>
        </member>
        <member name="M:NCS.DataAccess.OleDB.DoDataTable(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的 DataTable
            </summary>
            <param name="oledbCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含DB参数的数组，可以为 null</param>
            <returns>返回数据集的 DataTable</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.DoDataSet(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的 DataSet
            </summary>
            <param name="oledbCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含DB参数的数组，可以为 null</param>
            <returns>返回数据集的 DataSet</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.NewParameter(System.String,System.Object,System.Data.OleDb.OleDbType,System.Int32)">
            <summary>
            创建OleDbParameter对象,并指定变量名，值，DB数据类型，和大小
            </summary>
            <param name="varname">用户DB参数的变量名，以@开头，可省略@</param>
            <param name="value">值</param>
            <param name="sqltype">DB数据类型</param>
            <param name="size">字段长度</param>
            <returns>创建的OleDbParameter对象</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.NewParameter(System.String,System.Object,System.Data.OleDb.OleDbType)">
            <summary>
            创建OleDbParameter对象,并指定变量名，值，DB数据类型，和大小
            </summary>
            <param name="varname">用户DB参数的变量名，以@开头，可省略@</param>
            <param name="value">值</param>
            <param name="sqltype">DB数据类型</param>
            <returns>创建的OleDbParameter对象</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.ExcelConnectionString(System.String,System.Boolean)">
            <summary>
            获取连接到 Excel 文件的连接串
            </summary>
            <param name="xls">Excel 文件（2000-2002）</param>
            <param name="HasHeadRow">是否包含标题列</param>
            <returns>连接串</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.ExcelConnectionString(System.String,System.Boolean,System.Int32)">
            <summary>
            获取连接到 Excel 文件的连接串
            </summary>
            <param name="xls">Excel 文件（2000-2002）</param>
            <param name="HasHeadRow">是否包含标题列</param>
            <param name="IMEX">0=Export,1=Import,2=Full</param>
            <returns>连接串</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.Excel2007ConnectionString(System.String,System.Boolean)">
            <summary>
            获取连接到 Excel2007 文件的连接串
            </summary>
            <param name="xlsx">Excel2007 文件</param>
            <param name="HasHeadRow">是否包含标题列</param>
            <returns>连接串</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.DBFConnectionString(System.String)">
            <summary>
            获取连接到DBF文件的连接串，注意，OLEDB将连接到文件所在目录，表名为DBF文件名，同时可操作所有目录中的DBF文件
            </summary>
            <param name="dbffile"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.DBCConnectionString(System.String)">
            <summary>
            获取连接到DBC数据库文件的连接串，DBC是Foxpro中包含多个DBF数据表问整合文件
            </summary>
            <param name="dbcfile"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.Excel2007ConnectionString(System.String,System.Boolean,System.Int32)">
            <summary>
            获取连接到 Excel2007 文件的连接串
            </summary>
            <param name="xlsx">Excel2007 文件</param>
            <param name="HasHeadRow">是否包含标题列</param>
            <param name="IMEX">0=Export,1=Import,2=Full</param>
            <returns>连接串</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.AccessConnectionString(System.String,System.String,System.String)">
            <summary>
            获取连接到 Access 文件的连接串
            </summary>
            <param name="access">Access数据库文件</param>
            <param name="user">用户名</param>
            <param name="password">密码</param>
            <returns>连接串</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.Access2007ConnectionString(System.String,System.String)">
            <summary>
            获取连接到 Access2007 文件的连接串
            </summary>
            <param name="access">Access2007数据库文件</param>
            <param name="password">密码</param>
            <returns>连接串</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.TextConnectionString(System.String,System.Boolean)">
            <summary>
            获取连接到文本文件的连接串
            </summary>
            <param name="txtFoldor">文本文件所在的文件夹</param>
            <param name="HasHeadRow">是否包含标题列</param>
            <returns>返回的连接串</returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.GetConnectionString(System.String,System.Boolean)">
            <summary>
            根据扩展名，返回相应的连接串，若没有符合的类型，返回空字符串
            </summary>
            <param name="file">文件名</param>
            <param name="hasHeadRow">对于某些数据格式，是否包含标题列</param>
            <returns></returns>
        </member>
        <member name="M:NCS.DataAccess.OleDB.Dispose">
            <summary>
            是否对象占用的资源，包括占用的文件
            </summary>
        </member>
        <member name="M:NCS.DataAccess.QuerySubConditions.GetString(System.String)">
            <summary>
            获取可描述包含条件的字符串
            </summary>
            <param name="splitconditions">各个条件之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="T:NCS.DataAccess.QueryConditionOperator">
            <summary>
            各种条件运算方式，当前只支持：字符窜的 Equal，Contain；数值的 Equal，Between操作
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.Contain">
            <summary>
            包含（like）
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.BiggerThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.BiggerOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.LessOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.Between">
            <summary>
            在2值之间
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.BitAnd">
            <summary>
            按位与
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.BitOr">
            <summary>
            按位或
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.In">
            <summary>
            在一组值之间
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.Not">
            <summary>
            非，无直接操作符，用于和其他操作符组合使用
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.NotContain">
            <summary>
            不包含
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionOperator.NotBetween">
            <summary>
            不间于
            </summary>
        </member>
        <member name="T:NCS.DataAccess.ConditionRelation">
            <summary>
            用于连接各个条件的方式，AND或OR
            </summary>
        </member>
        <member name="F:NCS.DataAccess.ConditionRelation.AND">
            <summary>
            且，条件都满足才为True
            </summary>
        </member>
        <member name="F:NCS.DataAccess.ConditionRelation.OR">
            <summary>
            或，条件有一条满足即为True
            </summary>
        </member>
        <member name="T:NCS.DataAccess.QuerySortIn">
            <summary>
            排序方式，（默认通常为升序）
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QuerySortIn.Default">
            <summary>
            默认，通常=升序
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QuerySortIn.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QuerySortIn.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:NCS.DataAccess.QueryConditionExpressionType">
            <summary>
            表达式条件的类型
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionExpressionType.Property">
            <summary>
            仅仅将字段作为表达式
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionExpressionType.Expression">
            <summary>
            表达式包含一个符合E-SQL语法的字符串
            </summary>
        </member>
        <member name="T:NCS.DataAccess.QueryConditionExpression">
            <summary>
            表达式条件的内容
            </summary>
        </member>
        <member name="F:NCS.DataAccess.QueryConditionExpression.TableNamePlaceholder">
            <summary>
            表达式中，代表表名的占位符，对于单个字段可以省略，但若包含E-SQL表达式，则需要在用到的字段前加占位符
            </summary>
        </member>
        <member name="P:NCS.DataAccess.QueryConditionExpression.Expression">
            <summary>
            表达式，根据Type指定，可以为单独的字段，也可以为符合E-SQL语法的表达式，当需要使用到字段时，需要在字段前加上TableNamePlaceholder定义的占位符。如 $T$.Field
            </summary>
        </member>
        <member name="P:NCS.DataAccess.QueryConditionExpression.Type">
            <summary>
            表达式类型
            </summary>
        </member>
        <member name="T:NCS.DataAccess.Transaction">
            <summary>
            提供简单事务处理，根据DataBase创建与数据库的连接
            </summary>
        </member>
        <member name="T:NCS.DataAccess.Transaction.CloseTransOperator">
            <summary>
            关闭事务时需要执行的操作，无/提交/回滚
            </summary>
        </member>
        <member name="F:NCS.DataAccess.Transaction.CloseTransOperator.None">
            <summary>
            无操作
            </summary>
        </member>
        <member name="F:NCS.DataAccess.Transaction.CloseTransOperator.Commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:NCS.DataAccess.Transaction.CloseTransOperator.RollBack">
            <summary>
            回滚
            </summary>
        </member>
        <member name="F:NCS.DataAccess.Transaction.sqlconn">
            <summary>
            私有对象，连接对象
            </summary>
        </member>
        <member name="M:NCS.DataAccess.Transaction.#ctor">
            <summary>
            根据DataBase创建连接对象，创建本实例前，必须初始化DataBase静态类。
            </summary>
        </member>
        <member name="M:NCS.DataAccess.Transaction.#ctor(System.Data.IsolationLevel)">
            <summary>
            根据指定的事务锁定行为，创建事务
            </summary>
            <param name="level">事务锁定行为</param>
        </member>
        <member name="M:NCS.DataAccess.Transaction.#ctor(System.String)">
            <summary>
            根据指定的连接字符串，创建事务
            </summary>
            <param name="strconn">连接字符串</param>
        </member>
        <member name="M:NCS.DataAccess.Transaction.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            根据已经存在的链接对象，提供针对该连接对象的各种封装操作
            </summary>
            <param name="conn">连接对象</param>
            <param name="tran">事务对象，若为空，将新建一个</param>
        </member>
        <member name="M:NCS.DataAccess.Transaction.#ctor(System.String,System.Data.IsolationLevel)">
            <summary>
            根据指定的连接字符串和事务锁定行为，创建事务
            </summary>
            <param name="strconn">连接字符串</param>
            <param name="level">事务锁定行为</param>
        </member>
        <member name="P:NCS.DataAccess.Transaction.ServerVersion">
            <summary>
            获取当前连接的服务器的版本
            版本的格式为 ##.##.####，其中前两位是主版本，中间两位是次版本，最后四位是发布版本。该字符串的格式为 major.minor.build，其中 major 和 minor 必须为两位数，build 必须为四位数。
            </summary>
        </member>
        <member name="P:NCS.DataAccess.Transaction.ConnectionState">
            <summary>
            获取当前连接的状态，若未初始化连接，将返回 ConnectionState.Broken
            </summary>
        </member>
        <member name="P:NCS.DataAccess.Transaction.Timeout">
            <summary>
            SQL执行超时时间
            </summary>
        </member>
        <member name="M:NCS.DataAccess.Transaction.RollBack">
            <summary>
            回滚事务，取消先前操作（若已提交过数据或连接已关闭，将抛出异常：InvalidOperationException）
            </summary>
        </member>
        <member name="M:NCS.DataAccess.Transaction.Commit">
            <summary>
            提交事务，确认先前操作（若已提交过数据或连接已关闭，将抛出异常：InvalidOperationException）
            </summary>
        </member>
        <member name="M:NCS.DataAccess.Transaction.CloseTransaction(NCS.DataAccess.Transaction.CloseTransOperator)">
            <summary>
            结束事务，并关闭连接
            </summary>
            <param name="op">结束事务前，要执行的操作</param>
        </member>
        <member name="M:NCS.DataAccess.Transaction.CloseTransaction">
            <summary>
            结束事务，并关闭连接，在手动Commit/Rollback后使用。
            </summary>
        </member>
        <member name="P:NCS.DataAccess.Transaction.CommandType">
            <summary>
            命令类型，SQL语句或存储过程
            </summary>
        </member>
        <member name="P:NCS.DataAccess.Transaction.FillDataTableWithConstraint">
            <summary>
            获取或设置 填充DataTable时，是否也加入相应的约束
            </summary>
        </member>
        <member name="P:NCS.DataAccess.Transaction.ConnectionString">
            <summary>
            返回当前的连接串
            </summary>
        </member>
        <member name="M:NCS.DataAccess.Transaction.DoSQLCommand(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>改变的数据条数</returns>
        </member>
        <member name="M:NCS.DataAccess.Transaction.DoSQLObject(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的首行首列
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的首行首列</returns>
        </member>
        <member name="M:NCS.DataAccess.Transaction.DoSQLReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集 Reader 对象，返回null表示无数据或查询发生异常
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集 Reader 对象</returns>
        </member>
        <member name="M:NCS.DataAccess.Transaction.DoSQLTable(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的 DataTable
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的 DataTable</returns>
        </member>
        <member name="M:NCS.DataAccess.Transaction.DoSQLDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定的SQL语句或存储过程，并返回数据集的 DataSet
            </summary>
            <param name="sqlCmdLine">SQL语句或存储过程名</param>
            <param name="param">包含SQL参数的数组，可以为 null</param>
            <returns>返回数据集的 DataSet</returns>
        </member>
        <member name="M:NCS.DataAccess.Transaction.BlukCopy(System.Data.DataRow[],System.String,System.Int32,System.Int32)">
            <summary>
            将数据写入指定的数据库表中
            </summary>
            <param name="dr">要写入数据库的数据行</param>
            <param name="batchsize">批量写入的数目，默认50</param>
            <param name="timeout">超时时间，默认30秒</param>
            <param name="targettablename">目标数据表</param>
        </member>
        <member name="M:NCS.DataAccess.Transaction.Dispose">
            <summary>
            销毁事务对象
            </summary>
        </member>
        <member name="T:NCS.EasyReport.EasyReportPaper">
            <summary>
            通过拖放Winform标准控件，将他们转换为平面报表，输出到打印机或图片。
            </summary>
        </member>
        <member name="E:NCS.EasyReport.EasyReportPaper.DataBinding">
            <summary>
            当开始打印后，每次绑定一行DataSource指向的数据后触发，可以在此绑定子报表数据。
            </summary>
        </member>
        <member name="E:NCS.EasyReport.EasyReportPaper.PrintPage">
            <summary>
            当打印页时触发，若要在页内添加个性化数据，可在这里处理
            </summary>
        </member>
        <member name="E:NCS.EasyReport.EasyReportPaper.BeginPrint">
            <summary>
            开始打印列队时触发
            </summary>
        </member>
        <member name="E:NCS.EasyReport.EasyReportPaper.EndPrint">
            <summary>
            打印完毕时触发
            </summary>
        </member>
        <member name="E:NCS.EasyReport.EasyReportPaper.QueryPageSettings">
            <summary>
            先于PrintPage触发
            </summary>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.#ctor">
            <summary>
            构造函数，初始化打印对象
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.PrintDocument">
            <summary>
            获取打印文档对象
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.UserDefaultPageSize">
            <summary>
            设置打印纸张是否使用打印机默认设置而不另外设置纸张尺寸。
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.PrintReportFillDefaultPageSize">
            <summary>
            設置打印時，若UserDefaultPageSize=true，若實際報表尺寸較小，是否盡可能多的在一張紙中打印多份報表
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.IsSubReport">
            <summary>
            指示当前Report是否为另一个Report的子报表。
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.DocumentTitle">
            <summary>
            获取或设置打印页面的标题，将显示在打印列队内
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.PrintOtherControls">
            <summary>
            获取或设置一个值，对于非指定的控件，是否使用.NET自带方式将其输出到报表
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.PrinterSettings">
            <summary>
            获取或设置打印机设置
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.PageSettings">
            <summary>
            获取或设置页面设置
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.Pen">
            <summary>
            获取或设置默认画笔，所有线条都使用该画笔的设置
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.Brush">
            <summary>
            获取或设置默认的填充对象，所谓未指定的填充效果都由该对象决定
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.DataSource">
            <summary>
            获取或设置数据源
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.Binder">
            <summary>
            数据绑定对象，是一个EasyReportDataBinder对象，通过该对象为其他控件添加的扩展属性实现
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.FixLocation">
            <summary>
            当设置了AutoHeightControls相关控件，但需要固定某些控件的位置，如PageIndexLabel或Logo图片，可以设置对应的FixLocation属性为true
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.AutoHeightControls">
            <summary>
            设置GridView对象的打印方式，设为True则持续打印，直到数据结束，再继续打印后续内容，否则采用套打方式。
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.OuterSouce">
            <summary>
            为GridView设置数据源，主要用于打印中，不希望耗费时间在数据绑定上，可以通过附加属性设置数据源用于打印，而不触发GridView的数据绑定操作
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.FollowEmptryTipExtender">
            <summary>
            为DataGridView设置当打印完成后，还有空白行时加上指定提示文本，如：以下空白
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportPaper.CurrentIndex">
            <summary>
            获取或设置当前使用的数据源中的数据行
            </summary>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            触发 OnPrint 事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.Save(System.String,System.Drawing.Imaging.ImageFormat,System.Int32)">
            <summary>
            保存报表为图片格式
            </summary>
            <param name="filename">要输出的文件名</param>
            <param name="format">输出格式</param>
            <param name="SubReportPageIndex">要求输出的当前子报表页</param>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32)">
            <summary>
            保存报表为图片格式
            </summary>
            <param name="stream">要输出的流</param>
            <param name="format">输出格式</param>
            <param name="SubReportPageIndex">要求输出的当前子报表页</param>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.Save">
            <summary>
            将报表打印到图片
            </summary>
            <returns>所有输出的报表图片</returns>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.CountPage">
            <summary>
            计算共计打印页数，该功能相当于完整生成一次报表，会耗费时间和资源，慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.PrinterSetup">
            <summary>
            调用打印机设置对话框进行打印设置
            </summary>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.PageSetup">
            <summary>
            调用页面设置对话框进行页面设置
            </summary>
        </member>
        <member name="M:NCS.EasyReport.EasyReportPaper.Print">
            <summary>
            开始打印
            </summary>
        </member>
        <member name="T:NCS.EasyReport.EasyReportDataBinder">
            <summary>
            EasyReports的数据绑定类，通过该类，可以绑定控件的Text属性到DataTable的一个字段上，支持格式化输出
            </summary>
        </member>
        <member name="P:NCS.EasyReport.EasyReportDataBinder.Culture">
            <summary>
            用于设置打印时日期/货币等类型显示使用的地区/语言
            </summary>
        </member>
        <member name="M:NCS.EasyReport.EasyReportDataBinder.GetBindField(System.Windows.Forms.Control)">
            <summary>
            获取绑定字段的扩展属性
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.EasyReport.EasyReportDataBinder.SetBindField(System.Windows.Forms.Control,System.String)">
            <summary>
            设置绑定字段的扩展属性，支持格式化输出，
            格式为：字段名|格式。
            如：Date|yyyy/MM/dd
            </summary>
            <param name="c">绑定的控件</param>
            <param name="field">绑定字段的扩展属性，支持格式化输出</param>
        </member>
        <member name="M:NCS.EasyReport.EasyReportDataBinder.CanExtend(System.Object)">
            <summary>
            确定对象是否支持本扩展属性，支持的对象包括：
            Button，Label，CheckBox，CheckBox，RadioButton，TextBox，GroupBox，PictureBox
            其中PictureBox绑定的是图片的路径而非Text
            </summary>
            <param name="extendee"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.EasyReport.EasyReportFixLocation.GetFixLocation(System.Windows.Forms.Control)">
            <summary>
            获取控件是否固定位置
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.EasyReport.EasyReportFixLocation.CanExtend(System.Object)">
            <summary>
            确定对象是否支持本扩展属性，支持的对象包括：
            Button，Label，CheckBox，CheckBox，RadioButton，TextBox，GroupBox，PictureBox
            其中PictureBox绑定的是图片的路径而非Text
            </summary>
            <param name="extendee"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.EasyReport.LineEntry">
            <summary>
            线段节点类，用于在EasyReports上绘制线段，必须为EasyReport的子对象，但不支持子报表(IsSubReport=true)
            </summary>
        </member>
        <member name="M:NCS.EasyReport.LineEntry.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:NCS.EasyReport.LineEntry.To">
            <summary>
            获取或设置目标节点
            </summary>
        </member>
        <member name="M:NCS.EasyReport.LineEntry.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            已重写，触发DragDrop事件
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="P:NCS.EasyReport.LineEntry.Pen">
            <summary>
            获取或设置要使用的画笔
            </summary>
        </member>
        <member name="M:NCS.EasyReport.LineEntry.OnBackColorChanged(System.EventArgs)">
            <summary>
            已重写，当设计模式时，显示控件，运行模式设置控件为透明
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NCS.EasyReport.LineEntry.OnResize(System.EventArgs)">
            <summary>
            已重写，本控件尺寸被限定为8*8
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NCS.EasyReport.LineEntry.OnMove(System.EventArgs)">
            <summary>
            以重写，当控件移动后，重绘线条
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:NCS.EasyReport.PageIndexLabel">
            <summary>
            其内容将被替换成打印时的页号
            </summary>
        </member>
        <member name="T:NCS.EasyReport.EasyReportTipLabel">
            <summary>
            与Label功能相同，但作为EasyReport的子对象时，可以仅显示内容，而不会被打印出来。
            </summary>
        </member>
        <member name="T:NCS.EasyReport.IEasyReportItem">
            <summary>
            用于自定义的报表元素，可以提供自定义的绘画方法
            </summary>
        </member>
        <member name="M:NCS.EasyReport.IEasyReportItem.DrawMe(System.Drawing.Graphics)">
            <summary>
            可以实现自定义的绘画逻辑
            </summary>
            <param name="g">画布</param>
        </member>
        <member name="T:NCS.ErrorMessage.ErrorMessage">
            <summary>
            提供可包含异常信息的错误对话框的类
            </summary>
        </member>
        <member name="M:NCS.ErrorMessage.ErrorMessage.Show(System.String,System.String,System.Windows.Forms.MessageBoxIcon,System.Exception,System.Object[])">
            <summary>
            显示确认对话框
            </summary>
            <param name="strMessage">友好的提示文本</param>
            <param name="strTitle">提示窗口标题</param>
            <param name="icon">图标类型</param>
            <param name="ex">要显示的异常对象</param>
            <param name="objDisplayVars">要显示的参数/变量</param>
            <returns></returns>
        </member>
        <member name="M:NCS.ErrorMessage.ErrorMessage.Show(System.String,System.String,System.Exception)">
            <summary>
            显示错误对话框
            </summary>
            <param name="strMessage">友好的提示文本</param>
            <param name="strTitle">提示窗口标题</param>
            <param name="ex">要显示的异常对象</param>
            <returns></returns>
        </member>
        <member name="M:NCS.ErrorMessage.ErrorMessage.Show(System.Exception)">
            <summary>
            显示错误对话框
            </summary>
            <param name="ex">要显示的异常对象</param>
            <returns></returns>
        </member>
        <member name="M:NCS.ErrorMessage.ErrorMessage.Show(System.Exception,System.Object[])">
            <summary>
            显示错误对话框
            </summary>
            <param name="ex">要显示的异常对象</param>
            <param name="objDisplayVars">要显示的参数/变量</param>
            <returns></returns>
        </member>
        <member name="M:NCS.ErrorMessage.ErrorMessage.HandleThreadException">
            <summary>
            授权错误处理框架自动处理未捕获的异常。
            </summary>
        </member>
        <member name="M:NCS.ErrorMessage.ErrorMessage.CancelHandleThreadExcetpion">
            <summary>
            取消错误处理框架自动处理未捕获的异常。
            </summary>
        </member>
        <member name="P:NCS.ErrorMessage.ErrorMessage.DisplayException">
            <summary>
            是否强制显示错误信息，默认为HideException，但可以手工修改此值
            </summary>
        </member>
        <member name="M:NCS.ErrorMessage.MessageWindow.ShowMessage(System.String,System.String,System.Windows.Forms.MessageBoxIcon,System.Exception,System.Object[])">
            <summary>
            显示错误对话框
            </summary>
            <param name="strMessage">消息内容</param>
            <param name="strTitle">窗口标题</param>
            <param name="icon">图标类型</param>
            <param name="ex">异常实例</param>
            <param name="objDisplayVars">需要打印出来的变量值</param>
        </member>
        <member name="F:NCS.ErrorMessage.MessageWindow.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.ErrorMessage.MessageWindow.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.ErrorMessage.MessageWindow.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.IO.BitStream">
            <summary>
            实现按位操作数据的类
            </summary>
        </member>
        <member name="T:NCS.IO.Operator">
            <summary>
            实现一些文件/文件夹操作的静态方法
            </summary>
        </member>
        <member name="M:NCS.IO.Operator.OpenTextFile(System.String,System.Boolean)">
            <summary>
            先检查文件是否存在，若存在，修改只读等属性，之后 [打开（Append=true）] 或 [删除并最后创建（Append=false）]一个与文件名关联的StreamWrite对象，
            与File.AppendFile/CreateTextFile方法的主要不同之处在于，本方法使用Encoding.Default作为文件默认编码，而非UTF8
            </summary>
            <param name="file">要创建的文件名，可包含完整路径</param>
            <param name="Append">是否以追加方式添加文件</param>
        </member>
        <member name="M:NCS.IO.Operator.CreateTextFile(System.String)">
            <summary>
            先检查文件是否存在，若存在，修改只读等属性，删除并最后创建一个与文件名关联的StreamWrite对象，
            与File.CreateTextFile方法的主要不同之处在于，本方法使用Encoding.Default作为文件默认编码，而非UTF8
            </summary>
            <param name="file">要重新创建的文件名</param>
            <returns>可写入文件的StreamWriter对象</returns>
        </member>
        <member name="M:NCS.IO.Operator.DeleteFile(System.String)">
            <summary>
            删除文件，先检查文件是否存在，若存在，修改只读等属性，之后删除
            </summary>
            <param name="file">要删除的文件名，可包含完整路径</param>
        </member>
        <member name="M:NCS.IO.Operator.DetectEncoding(System.String)">
            <summary>
            检查参数指定的文件的编码，主要判断是UTF-8或是GB2312/GBK
            </summary>
            <param name="file">包含文本数据的文件名</param>
            <returns>推断出的数据编码</returns>
        </member>
        <member name="M:NCS.IO.Operator.DetectEncoding(System.IO.Stream)">
            <summary>
            检查参数流内容的编码，主要判断是UTF-8或是GB2312/GBK
            </summary>
            <param name="rawsm">包含文本数据的数据流</param>
            <returns>推断出的数据编码</returns>
        </member>
        <member name="M:NCS.IO.Operator.DetectEncoding(System.Byte[])">
            <summary>
            检查参数字节数组内容的编码，主要判断是UTF-8或是GB2312/GBK
            </summary>
            <param name="raw">包含文本数据的字节数组</param>
            <returns>推断出的数据编码</returns>
        </member>
        <member name="M:NCS.IO.Operator.HasGarbageChars(System.Byte[],System.Text.Encoding)">
            <summary>
            按照指定编码检查给定的字节数组中是否包含乱码
            </summary>
            <param name="raw"></param>
            <param name="encoding">仅支持UTF8/GB2312/GBK/GB18030编码检测</param>
            <returns>true表示有乱码</returns>
        </member>
        <member name="T:NCS.IO.NetDisk">
            <summary>
            映射远程路径到本地路径
            </summary>
        </member>
        <member name="M:NCS.IO.NetDisk.GetMappedDriver(System.String)">
            <summary>
            查找远程路径之前已经映射过的本地路径
            </summary>
            <param name="remotepath">远程路径</param>
            <returns>映射的本地路径，若尚未映射过，则将返回null</returns>
        </member>
        <member name="M:NCS.IO.NetDisk.Connect(System.String,System.String,System.String,System.Boolean)">
            <summary>
            连接并登陆到远程路径，返回映射的路径
            </summary>
            <param name="username">登陆用户名</param>
            <param name="password">登陆密码</param>
            <param name="remotepath">远程路径</param>
            <returns>自动分配的路径</returns>
        </member>
        <member name="M:NCS.IO.NetDisk.DisConnect">
            <summary>
            断开所有驱动器连接
            </summary>
        </member>
        <member name="M:NCS.IO.NetDisk.DisConnect(System.String)">
            <summary>
            断开指定的远程路径
            </summary>
            <param name="remoteOrlocalpath">指定的远程路径</param>
        </member>
        <member name="P:NCS.Linq.NCS_User.TimeAfterLastUpatePassword">
            <summary>
            获取用户从上次更新用户密码至今经过的时间
            </summary>
        </member>
        <member name="T:NCS.Linq.UserState">
            <summary>
            对应数据库中，用户状态
            </summary>
        </member>
        <member name="F:NCS.Linq.UserState.Approve">
            <summary>
            可用
            </summary>
        </member>
        <member name="F:NCS.Linq.UserState.Penging">
            <summary>
            待审批
            </summary>
        </member>
        <member name="F:NCS.Linq.UserState.Submit">
            <summary>
            已提交
            </summary>
        </member>
        <member name="T:NCS.Linq.MenuState">
            <summary>
            对应数据库中，菜单状态
            </summary>
        </member>
        <member name="F:NCS.Linq.MenuState.Active">
            <summary>
            活动菜单
            </summary>
        </member>
        <member name="F:NCS.Linq.MenuState.InActive">
            <summary>
            无效菜单
            </summary>
        </member>
        <member name="T:NCS.Linq.MenuType">
            <summary>
            菜单类型（直接启动窗体或执行自定义操作）
            </summary>
        </member>
        <member name="F:NCS.Linq.MenuType.RunForm">
            <summary>
            直接启动窗体
            </summary>
        </member>
        <member name="F:NCS.Linq.MenuType.RunFormWithParameter">
            <summary>
            启动窗体，并将Parameter指定的参数作为构造参数传入
            </summary>
        </member>
        <member name="F:NCS.Linq.MenuType.Custom">
            <summary>
            自定义操作，将触发 MenuClick 操作
            </summary>
        </member>
        <member name="F:NCS.Linq.MenuType.Parent">
            <summary>
            作为其他菜单的父菜单，无实际功能
            </summary>
        </member>
        <member name="F:NCS.Linq.MenuType.Separator">
            <summary>
            菜单分割符，无实际功能
            </summary>
        </member>
        <member name="T:NCS.Linq.WorkflowState">
            <summary>
            工作流审批状态
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowState.Submitted">
            <summary>
            已提交
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowState.Approved">
            <summary>
            已审批
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowState.Rejected">
            <summary>
            已拒绝
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowState.ReSubmitted">
            <summary>
            再次提交（经过修改）
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowState.Deleting">
            <summary>
            申请删除
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowState.Deleted">
            <summary>
            已删除
            </summary>
        </member>
        <member name="T:NCS.Linq.WorkflowAction">
            <summary>
            工作流审批动作
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowAction.Submit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowAction.Approve">
            <summary>
            批核
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowAction.Reject">
            <summary>
            拒绝
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowAction.ReSubmit">
            <summary>
            重新提交
            </summary>
        </member>
        <member name="F:NCS.Linq.WorkflowAction.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:NCS.PDL.IPDL`1">
            <summary>
            持久数据层接口，提供标准的增删改查相关的基础方法。可以（建议）配合CacheBase使用，以提高性能
            </summary>
            <typeparam name="T">实体类</typeparam>
        </member>
        <member name="M:NCS.PDL.IPDL`1.QueryData(NCS.DataAccess.QueryConditions,System.Int32@)">
            <summary>
            查询数据
            </summary>
            <param name="conditions">查询条件，排序，分页等选项</param>
            <param name="recordCount">不分页情况下的数据总条数</param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.FirstOrDefault(NCS.DataAccess.QuerySubConditions)">
            <summary>
            根据指定条件，返回一条数据，若为空，则返回null
            </summary>
            <param name="conditions">条件</param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.Any(NCS.DataAccess.QuerySubConditions)">
            <summary>
            指定的条件是否包含数据
            </summary>
            <param name="conditions">条件</param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.Count(NCS.DataAccess.QuerySubConditions)">
            <summary>
            指定的条件包含的数据总数
            </summary>
            <param name="conditions">条件</param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.UpdateData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新一组数据
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.UpdateData(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.UpdateData(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],NCS.DataAccess.QuerySubConditions)">
            <summary>
            根据指定条件，更新指定字段的内容
            </summary>
            <param name="modify">被修改的字段/值的对应列表</param>
            <param name="conditions">条件</param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.InsertData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入一组数据
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.InsertData(`0)">
            <summary>
            插入一条数据
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.DeleteData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除一组数据
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.DeleteData(NCS.DataAccess.QuerySubConditions)">
            <summary>
            删除符合指定条件的数据
            </summary>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.IPDL`1.DeleteData(`0)">
            <summary>
            删除一条数据
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:NCS.PDL.MemoryPDLBase`2.AllowDirtyReads">
            <summary>
            是否允许脏读，默认为False，不允许。不允许时，读取前将检查是否有写操作，若有写操作，则等待写操作完成后再读取数据。
            </summary>
        </member>
        <member name="T:NCS.PDL.PDL_ObjectContext_NoCache_Base`3">
            <summary>
            与PDL_ObjectContext_Base对应，但没有缓存支持的PDL对象。
            </summary>
            <typeparam name="M">领域模型实体类</typeparam>
            <typeparam name="EFC">ObjectContext实体模型上下文对象</typeparam>
            <typeparam name="EFM">EntityFramework实体模型</typeparam>
        </member>
        <member name="T:NCS.PDL.PDL_ObjectContext_Base`4">
            <summary>
            为EntityFramework（ObjectContext）以及缓存，提供数据持久层的默认实现
            </summary>
            <typeparam name="C">缓存类</typeparam>
            <typeparam name="M">领域模型实体类</typeparam>
            <typeparam name="EFC">ObjectContext实体模型上下文对象</typeparam>
            <typeparam name="EFM">EntityFramework实体模型</typeparam>
        </member>
        <member name="M:NCS.PDL.PDL_ObjectContext_Base`4.CreateObjectContext">
            <summary>
            获取EntityFramework的数据上下文对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.PDL_ObjectContext_Base`4.GetObjectQuery(`2)">
            <summary>
            获取数据上下文中的数据集合查询对象，用于查询，通常可以直接返回ObjectSet集合；只有对于表之间有继承关系时，需要通过使用OfType()处理父类的ObjectSet对象。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.PDL.PDL_ObjectContext_Base`4.GetObjectSet(`2)">
            <summary>
            获取数据上下文中的表示表的对象，用于数据操作（增/删），通常可以直接返回ObjectSet集合；只有对于表之间有继承关系时，需要通过使用父类的ObjectSet对象。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:NCS.PDL.PDL_ObjectContext_Base`4.AllowDirtyReads">
            <summary>
            是否允许脏读，默认为False，不允许。不允许时，读取前将检查是否有写操作，若有写操作，则等待写操作完成后再读取数据。
            </summary>
        </member>
        <member name="T:NCS.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NCS.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NCS.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:NCS.Security.IdentityImpersonation">
            <summary>
            用户模拟角色类。实现在程序段内进行用户角色模拟。
            </summary>
        </member>
        <member name="P:NCS.Security.IdentityImpersonation.LogonType">
            <summary>
            登录类型
            </summary>
        </member>
        <member name="P:NCS.Security.IdentityImpersonation.Valid">
            <summary>
            根据判断是否已设置要模拟的用户名返回是否有效
            </summary>
        </member>
        <member name="M:NCS.Security.IdentityImpersonation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="impersonationUsername">所要模拟的用户的用户名</param>
            <param name="impersonationPassword">所要模拟的用户的密码</param>
            <param name="impersonationDomain">所要模拟的用户所在的域</param>
            <param name="basepath">要模拟的目录，可为空，但对于windows2000系统，必须填写</param>
        </member>
        <member name="M:NCS.Security.IdentityImpersonation.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="impersonationUsername">所要模拟的用户的用户名</param>
            <param name="impersonationPassword">所要模拟的用户的密码</param>
            <param name="impersonationDomain">所要模拟的用户所在的域</param>
            <param name="autostartimpersontion">是否立即开始模拟，若使用using{}语法，建议设为ture，且不再需要显式执行Begin/Stop方法。</param>
            <param name="basepath">要模拟的目录，可为空，但对于windows2000系统，必须填写</param>
        </member>
        <member name="M:NCS.Security.IdentityImpersonation.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数，该构造将访问数据库，请确认使用前已经初始化过数据库连接并实例化NCS.Business.CommonLogic.CurrentInformation类
            </summary>
            <param name="basepath">目录，从数据表CITI_FolderFunctionID中查找匹配项（包括分行/部门条件筛选）</param>
            <param name="autostartimpersontion">是否立即开始模拟，若使用using{}语法，建议设为ture，且不再需要显式执行Begin/Stop方法。</param>
        </member>
        <member name="M:NCS.Security.IdentityImpersonation.Finalize">
            
            析构函数
            
        </member>
        <member name="M:NCS.Security.IdentityImpersonation.BeginImpersonate">
            
            开始身份角色模拟。
            
            
        </member>
        <member name="P:NCS.Security.IdentityImpersonation.LastError">
            <summary>
            错误号
            </summary>
        </member>
        <member name="M:NCS.Security.IdentityImpersonation.CopyFile(System.String,System.String)">
            <summary>
            根据配置的权限复制文件。
            </summary>
            <param name="source">原文件</param>
            <param name="desc">目标文件</param>
        </member>
        <member name="M:NCS.Security.IdentityImpersonation.Delete(System.String)">
            <summary>
            使用配置的权限，删除文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:NCS.Security.IdentityImpersonation.StopImpersonate">
            
            停止身分角色模拟。
            
        </member>
        <member name="T:NCS.Security.Impersonation_LogonType">
            <summary>
            登录类型
            </summary>
        </member>
        <member name="F:NCS.Security.Impersonation_LogonType.LOGON32_LOGON_INTERACTIVE">
            <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on by a terminal server, remote shell, or similar process. This logon type has the additional expense of caching logon information for disconnected operations; therefore, it is inappropriate for some client/server applications, such as a mail server.
            </summary>
        </member>
        <member name="F:NCS.Security.Impersonation_LogonType.LOGON32_LOGON_NETWORK">
            <summary>
            This logon type is intended for high performance servers to authenticate plaintext passwords. The LogonUser function does not cache credentials for this logon type.
            
            The LOGON32_LOGON_NETWORK logon type is fastest, but it has the following limitations:
            The function returns an impersonation token, not a primary token. You cannot use this token directly in the CreateProcessAsUser function. However, you can call the DuplicateTokenEx function to convert the token to a primary token, and then use it in CreateProcessAsUser.
            If you convert the token to a primary token and use it in CreateProcessAsUser to start a process, the new process cannot access other network resources, such as remote servers or printers, through the redirector. An exception is that if the network resource is not access controlled, then the new process will be able to access it.
            </summary>
        </member>
        <member name="F:NCS.Security.Impersonation_LogonType.LOGON32_LOGON_BATCH">
            <summary>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without their direct intervention. This type is also for higher performance servers that process many plaintext authentication attempts at a time, such as mail or web servers.
            </summary>
        </member>
        <member name="F:NCS.Security.Impersonation_LogonType.LOGON32_LOGON_SERVICE">
            <summary>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </summary>
        </member>
        <member name="F:NCS.Security.Impersonation_LogonType.LOGON32_LOGON_NETWORK_CLEARTEXT">
            <summary>
            This logon type preserves the name and password in the authentication package, which allows the server to make connections to other network servers while impersonating the client. A server can accept plaintext credentials from a client, call LogonUser, verify that the user can access the system across the network, and still communicate with other servers.
            </summary>
        </member>
        <member name="F:NCS.Security.Impersonation_LogonType.LOGON32_LOGON_NEW_CREDENTIALS">
            <summary>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the same local identifier but uses different credentials for other network connections.
            This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            </summary>
        </member>
        <member name="T:NCS.Settings.Config">
            <summary>
            配置相关内容
            </summary>
        </member>
        <member name="P:NCS.Settings.Config.AppConfig">
            <summary>
            获取或设置需要配置或读取的App.Config的文件名，若赋值为空（或未曾赋值）则下次读取该属性将取得调用方的EXE的默认config，否则返回上次设置的值。
            </summary>
        </member>
        <member name="P:NCS.Settings.Config.CurrentPath">
            <summary>
            获取当前AppConfig配置文件所在的路径，通常为当前程序目录。
            </summary>
        </member>
        <member name="P:NCS.Settings.Config.HideException">
            <summary>
            是否抛出Exception，建议调试和测试阶段设置为False，发布时设置为True。默认为True。可通过在Appconfig中加入同名键值来设置，也可在程序中设置。
            </summary>
        </member>
        <member name="M:NCS.Settings.Config.SetSettingToAppConfig(System.String,System.String)">
            <summary>
            提供直接修改AppConfig内配置值得方法
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:NCS.Settings.Config.GetSettingFromAppConfig(System.String)">
            <summary>
            直接从文件中获取配置（而不通过缓存，主要用于中途修改过AppConfig的情况）
            </summary>
            <param name="key">键</param>
            <returns>对应的值，若不存在制定的键，则返回空字符串</returns>
        </member>
        <member name="T:NCS.Tools.QuickEncrypt">
            <summary>
            提供简单,基本的加密算法
            </summary>
        </member>
        <member name="T:NCS.Tools.QuickEncrypt.EncryptBit">
            <summary>
            加密位（密钥强度）
            </summary>
        </member>
        <member name="F:NCS.Tools.QuickEncrypt.EncryptBit.B8">
            <summary>
            8位
            </summary>
        </member>
        <member name="F:NCS.Tools.QuickEncrypt.EncryptBit.B16">
            <summary>
            16位
            </summary>
        </member>
        <member name="F:NCS.Tools.QuickEncrypt.EncryptBit.B32">
            <summary>
            32位
            </summary>
        </member>
        <member name="F:NCS.Tools.QuickEncrypt.EncryptBit.B64">
            <summary>
            64位
            </summary>
        </member>
        <member name="F:NCS.Tools.QuickEncrypt.EncryptBit.B128">
            <summary>
            128位
            </summary>
        </member>
        <member name="F:NCS.Tools.QuickEncrypt.EncryptBit.B256">
            <summary>
            256位
            </summary>
        </member>
        <member name="M:NCS.Tools.QuickEncrypt.MD5(System.String)">
            <summary>
            标准32位MD5加密算法
            </summary>
            <param name="src">原文字符串（作为UTF8编码处理）</param>
            <returns>Hash字符串</returns>
        </member>
        <member name="M:NCS.Tools.QuickEncrypt.MD5(System.Byte[])">
            <summary>
            标准32位MD5加密算法
            </summary>
            <param name="src">原文字节数组</param>
            <returns>Hash字符串</returns>
        </member>
        <member name="P:NCS.Tools.QuickEncrypt.ConfigEncryptionKey">
            <summary>
            EncryptConfig与DecryptConfig方法适用的密钥，若为空，则使用默认密钥。
            </summary>
        </member>
        <member name="M:NCS.Tools.QuickEncrypt.EncryptConfig(System.String)">
            <summary>
            使用DES加密字符串
            </summary>
            <param name="src">要加密的明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:NCS.Tools.QuickEncrypt.DecryptConfig(System.String)">
            <summary>
            解密DES加密后的字符串
            </summary>
            <param name="src">要解密的密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:NCS.Tools.QuickEncrypt.TripleDESEncrypt(System.Byte[],System.String)">
            <summary>
            使用3重DES加密字节数组,若发生错误,返回0长度的字节数组
            </summary>
            <param name="source">要加密的原文</param>
            <param name="password">密码</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:NCS.Tools.QuickEncrypt.TripleDESDncrypt(System.Byte[],System.String)">
            <summary>
            使用3重DES解密字节数组,若发生错误,返回0长度的字节数组
            </summary>
            <param name="source">要解密的密文</param>
            <param name="password">密码</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:NCS.Tools.QuickEncrypt.SHA256(System.String)">
            <summary>
            HASH加密，可替代MD5
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Tools.QuickEncrypt.SHA256(System.Byte[])">
            <summary>
            HASH加密，可替代MD5
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.Tools.Localization">
            <summary>
            本地化文本，根据指定的XML语言文件，提供一个简单的本地化字符串查询类。
            </summary>
        </member>
        <member name="M:NCS.Tools.Localization.GetText(System.String,System.String)">
            <summary>
            获取指定的键值的字符串，若不存在，将返回默认值
            </summary>
            <param name="key">键值</param>
            <param name="defaultvalue">默认值</param>
            <returns>本地化文本</returns>
        </member>
        <member name="M:NCS.Tools.Localization.GetText(System.Type,System.String,System.String)">
            <summary>
            获取指定类和属性名对应的本地化字符串，若不存在，将返回默认值
            </summary>
            <param name="t">类</param>
            <param name="property">类的属性名</param>
            <param name="defaultvalue">默认值</param>
            <returns>本地化文本</returns>
        </member>
        <member name="P:NCS.Tools.Localization.Language">
            <summary>
            获取语言名称
            </summary>
        </member>
        <member name="P:NCS.Tools.Localization.Version">
            <summary>
            获取语言文件的版本
            </summary>
        </member>
        <member name="M:NCS.Tools.Localization.#ctor(System.String)">
            <summary>
            构造函数，读取指定的语言xml文件
            </summary>
            <exception cref="T:System.Exception">未指定语言文件/文件格式不正确</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在</exception>
            <param name="language_file">语言XML文件，以当前程序路径为基准的相对路径</param>
        </member>
        <member name="M:NCS.Tools.Localization.#ctor">
            <summary>
            默认构造，将从web.config中的AppSettings/NCS.Web.Language小节读取默认的语言文件名
            </summary>
        </member>
        <member name="P:NCS.Tools.Localization.Localize">
            <summary>
            一个本地化字符类的静态实例，若不指定任何本地化文本，请使用本属性。也可自行实例化本类的实例并赋值，程序将读取指定的本地化内容。
            </summary>
        </member>
        <member name="T:NCS.Tools.Windows">
            <summary>
            与Windows系统相关的操作
            </summary>
        </member>
        <member name="M:NCS.Tools.Windows.AllocConsole">
            <summary>
            为诸如Winform程序这样没有控制台的程序，申请一个控制台(Console)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Tools.Windows.FreeConsole">
            <summary>
            消除使用AllocConsole申请的控制台
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Tools.Windows.ShellExecute(System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            执行一个外部命令
            </summary>
            <param name="hwnd">宿主句柄</param>
            <param name="lpOperation">操作名称，open/print等</param>
            <param name="lpFile">执行程序名</param>
            <param name="lpParameters">参数名</param>
            <param name="lpDirectory">初始化目录</param>
            <param name="nShowCmd">执行程序的默认状态</param>
            <returns>是否成功，0表示失败</returns>
        </member>
        <member name="M:NCS.Tools.Windows.AnimateWindow(System.Windows.Forms.Form,System.Int32,NCS.Tools.AnimateWindowFlag)">
            <summary>
            动画展示/隐藏指定窗口，仅支持Windows2000及以上操作系统
            </summary>
            <param name="form">窗口实例</param>
            <param name="time">动画持续时间，单位毫秒</param>
            <param name="flag">标志位，要实现的效果</param>
        </member>
        <member name="M:NCS.Tools.Windows.TerminateProgram(System.String)">
            <summary>
            强行关闭某程序（已知窗口标题）
            </summary>
            <param name="windowTitle">窗口标题</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:NCS.Tools.Windows.GetText(System.Int32)">
            <summary>
            获取指定句柄对应对象的Text
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Tools.Windows.GetWindowsDirectory">
            <summary>
            获取Windows所在目录
            </summary>
            <returns></returns>
        </member>
        <member name="P:NCS.Tools.Windows.WindowsVersion">
            <summary>
            返回当前详细的Windows的版本信息
            </summary>
        </member>
        <member name="T:NCS.Tools.AnimateWindowFlag">
            <summary>
            窗体显示/隐藏函数的标志位
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_HOR_POSITIVE">
            <summary>
            从左到右打开窗口
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_HOR_NEGATIVE">
            <summary>
            从右到左打开窗口
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_VER_POSITIVE">
            <summary>
            从上到下打开窗口
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_VER_NEGATIVE">
            <summary>
            从下到上打开窗口
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_CENTER">
            <summary>
            从中央打开
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_HIDE">
            <summary>
            隐藏窗体
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_ACTIVATE">
            <summary>
            显示窗体
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_SLIDE">
            <summary>
            滑动效果
            </summary>
        </member>
        <member name="F:NCS.Tools.AnimateWindowFlag.AW_BLEND">
            <summary>
            淡入淡出效果
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.BACKOFFICE">
            <summary>
            Microsoft BackOffice components are installed.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.WEB_SERVER">
            <summary>
            Windows Server, Web Edition is installed.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.COMPUTE_CLUSTER_SERVER">
            <summary>
            Windows Server, Compute Cluster Edition is installed.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.DATACENTER_SERVER">
            <summary>
            Windows Datacenter Server is installed.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.ENTERPRISE">
            <summary>
            Windows Enterprise Server is installed(include: Windows 2000  Advanced Server)
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.EMBEDDEDNT">
            <summary>
            Windows Embedded is installed.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.PERSONAL">
            <summary>
            Windows Home Version (XP/Vista/7 Home)
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.SINGLEUSERTS">
            <summary>
            Remote Desktop is supported, but only one interactive session is supported. This value is set unless the system is running in application server mode.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.SMALLBUSINESS">
            <summary>
            Microsoft Small Business Server was once installed on the system, but may have been upgraded to another version of Windows.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.SMALLBUSINESS_RESTRICTED">
            <summary>
            Microsoft Small Business Server is installed with the restrictive client license in force.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.STORAGE_SERVER">
            <summary>
            Windows Storage Server is installed.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.TERMINAL">
            <summary>
            Terminal Services is installed. This value is always set. If TERMINAL is set but SINGLEUSERTS is not set, the system is running in application server mode.
            </summary>
        </member>
        <member name="F:NCS.Tools.WindowsVersion.OSSuite.HOME_SERVER">
            <summary>
            Windows Home Server is installed.
            </summary>
        </member>
        <member name="T:NCS.CitiSourceDoc">
            <summary>
            实现一些便于生成最终提交Citi代码时需要的功能
            </summary>
        </member>
        <member name="M:NCS.CitiSourceDoc.MakeDiffList(System.String)">
            <summary>
            根据源代码目录结构，创建Difflist，即把cs文件转为txt文件扩展名，删除其他文件
            </summary>
            <param name="path">要处理的文件夹</param>
        </member>
        <member name="M:NCS.CitiSourceDoc.MakeChangeDocFileList(System.String,System.Int32)">
            <summary>
            根据源代码目录结构，生成层次结构的Html表格，请复制到FrontPage/SharePointDesigner的代码视图中，再复制设计视图中的内容到Word内
            </summary>
            <param name="path">源代码所在路经</param>
            <param name="level">初始路经层级，可设为1</param>
            <returns>文件列表的html代码</returns>
        </member>
        <member name="M:NCS.CitiSourceDoc.GetDiffByWinDiffCompare(System.String[])">
            <summary>
            根据Windiff的比较结果,获得简单的区别列表
            </summary>
            <param name="lines">所有的行</param>
            <returns></returns>
        </member>
        <member name="M:NCS.CitiSourceDoc.GetDataBaseTableStructure(System.String[])">
            <summary>
            获取指定表的结构，并输出为html格式的表格
            </summary>
            <param name="tables">表名列表</param>
            <returns>html标签</returns>
        </member>
        <member name="M:NCS.CitiSourceDoc.GetEnumValueMapping(System.Type[])">
            <summary>
            获取指定的枚举类型的值对应表，并输出为html格式的表格
            </summary>
            <param name="enumtype">枚举类型</param>
            <returns>html标签</returns>
        </member>
        <member name="T:NCS.Utility">
            <summary>
            提供各种简化的功能函数
            </summary>
        </member>
        <member name="M:NCS.Utility.CopyMemory(System.Void*,System.Void*,System.Int32)">
            <summary>
            快速复制内存，可用于强行的类型转换，必须非安全（unsafe{}）块中使用，非必要，不建议使用。
            </summary>
            <param name="Destination">目标对象的指针</param>
            <param name="Source">源对象的指针</param>
            <param name="Length">要复制的长度（单位：字节）</param>
        </member>
        <member name="M:NCS.Utility.CopyMemory(System.Byte[],System.Void*,System.Int32)">
            <summary>
            快速复制内存，可强行将任何类型转换为字节数组，必须非安全（unsafe{}）块中使用，非必要，不建议使用。
            </summary>
            <param name="Destination">目标字节数组</param>
            <param name="Source">源对象的指针</param>
            <param name="Length">要复制的长度（单位：字节）</param>
        </member>
        <member name="M:NCS.Utility.CopyMemory(System.Void*,System.Byte[],System.Int32)">
            <summary>
            快速复制内存，可强行将字节数组转换为任何类型对象，必须非安全（unsafe{}）块中使用，非必要，不建议使用。
            </summary>
            <param name="Destination">目标对象的指针</param>
            <param name="Source">源字节数组</param>
            <param name="Length">要复制的长度（单位：字节）</param>
        </member>
        <member name="M:NCS.Utility.ShowInfomation(System.String,System.String)">
            <summary>
            显示提示对话框
            </summary>
            <param name="strMessage">要显示的内容</param>
            <param name="strTitle">标题</param>
        </member>
        <member name="M:NCS.Utility.ShowInfomation(System.String)">
            <summary>
            显示提示对话框
            </summary>
            <param name="strMessage">要显示的内容</param>
        </member>
        <member name="M:NCS.Utility.ShowError(System.String,System.String)">
            <summary>
            显示错误对话框
            </summary>
            <param name="strMessage">要显示的内容</param>
            <param name="strTitle">标题</param>
        </member>
        <member name="M:NCS.Utility.ShowError(System.String)">
            <summary>
            显示错误对话框
            </summary>
            <param name="strMessage">要显示的内容</param>
        </member>
        <member name="M:NCS.Utility.ShowAlert(System.String,System.String)">
            <summary>
            显示警告对话框
            </summary>
            <param name="strMessage">要显示的内容</param>
            <param name="strTitle">标题</param>
        </member>
        <member name="M:NCS.Utility.ShowAlert(System.String)">
            <summary>
            显示警告对话框
            </summary>
            <param name="strMessage">要显示的内容</param>
        </member>
        <member name="M:NCS.Utility.ShowConfirm(System.String,System.String)">
            <summary>
            显示询问对话框
            </summary>
            <param name="strMessage">要显示的内容</param>
            <param name="strTitle">标题</param>
            <returns>用户是否确认，True=用户选择YES，False=用户选择No</returns>
        </member>
        <member name="M:NCS.Utility.ShowConfirm(System.String)">
            <summary>
            显示询问对话框
            </summary>
            <param name="strMessage">要显示的内容</param>
            <returns>用户是否确认，True=用户选择YES，False=用户选择No</returns>
        </member>
        <member name="M:NCS.Utility.GetControlAbsolutePoint(System.Windows.Forms.Control)">
            <summary>
            获取控件在屏幕中的绝对位置
            </summary>
            <param name="c">控件实例</param>
            <returns>控件在屏幕中的位置</returns>
        </member>
        <member name="M:NCS.Utility.GetDataAfterColon(System.String)">
            <summary>
            获取第一个冒号之后的内容
            </summary>
            <param name="strExp">字符串</param>
            <returns>首个冒号之后的内容</returns>
        </member>
        <member name="M:NCS.Utility.ArrayToString``1(``0[],System.String)">
            <summary>
            将数组内的元素组成一个字符串，以指定符号分割。
            </summary>
            <typeparam name="T">数组元素的类型</typeparam>
            <param name="array">数组</param>
            <param name="splitChar">用来分隔各个项的字符</param>
            <returns>包含所有元素的字符串</returns>
        </member>
        <member name="M:NCS.Utility.ArrayToString``1(``0[],System.Boolean,System.String)">
            <summary>
            将数组内的元素组成一个字符串，以指定符号分割。
            </summary>
            <typeparam name="T">数组元素的类型</typeparam>
            <param name="array">数组</param>
            <param name="isNumberType">是否作为数值型处理，字符型会加上''，数字型不会</param>
            <param name="splitChar">用来分隔各个项的字符</param>
            <returns>包含所有元素的字符串</returns>
        </member>
        <member name="M:NCS.Utility.Convert``1(System.String,``0,System.String)">
            <summary>
            将指定的字符串转换为指定的类型，若失败则返回指定默认值
            </summary>
            <typeparam name="T">要转换的类型，必须支持TryParse方法</typeparam>
            <param name="s">要转换的字符串</param>
            <param name="defautvalue">默认值</param>
            <param name="format">对于DateTime可以指定yyyyMMdd一类格式，对于其他类型，可以指定区域名称如 en-US</param>
            <returns>若成功，返回转换后的值，否则返回指定的默认值</returns>
        </member>
        <member name="M:NCS.Utility.Convert``1(System.String)">
            <summary>
            将指定的字符串转换为指定的类型，若失败则返回默认值
            </summary>
            <typeparam name="T">要转换的类型，必须支持TryParse方法</typeparam>
            <param name="s">要转换的字符串</param>
            <returns>若成功，返回转换后的值，否则返回指定的默认值</returns>
        </member>
        <member name="M:NCS.Utility.Convert``1(System.String,``0)">
            <summary>
            将指定的字符串转换为指定的类型，若失败则返回指定默认值
            </summary>
            <typeparam name="T">要转换的类型，必须支持TryParse方法</typeparam>
            <param name="s">要转换的字符串</param>
            <param name="defautvalue">默认值</param>
            <returns>若成功，返回转换后的值，否则返回指定的默认值</returns>
        </member>
        <member name="M:NCS.Utility.ConvertNullable2Value``1(System.Nullable{``0})">
            <summary>
            将可空类型转换为实际值类型，或值为空，则返回默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.CanConvert``1(System.String)">
            <summary>
            判断字符窜是否可以转换为指定的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.GetFormatProvider(System.String)">
            <summary>
            根据指定的字符串，返回相应的IFormatProvider实现，主要支持区域名称和日期掩码
            </summary>
            <param name="format">对于DateTime可以指定yyyyMMdd一类格式，对于其他类型，可以指定区域名称如 en-US</param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.TextBoxFormatValid(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            判断指定控件集合中的TextBoxWithFormat控件中的数据是否符合要求
            </summary>
            <param name="c">控件集合，如 Form1.Controls</param>
            <returns>是否有项目不符合要求或全部符合要求。</returns>
        </member>
        <member name="M:NCS.Utility.TextBoxFormatValid(System.Windows.Forms.Control.ControlCollection,System.Boolean)">
            <summary>
            判断指定控件集合中的TextBoxWithFormat控件中的数据是否符合要求
            </summary>
            <param name="c">控件集合，如 Form1.Controls</param>
            <param name="recursive">递归</param>
            <returns>是否有项目不符合要求或全部符合要求。</returns>
        </member>
        <member name="M:NCS.Utility.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            通过反射，设置对象的属性，通常用于不确定类型的对象或私有属性
            </summary>
            <param name="instance">对象实例</param>
            <param name="PropertyName">属性名</param>
            <param name="value">要设置的值</param>
            <returns>设置是否成功</returns>
        </member>
        <member name="M:NCS.Utility.GetProperty(System.Object,System.String)">
            <summary>
            通过反射，获取对象的属性，通常用于不确定类型的对象或私有属性
            </summary>
            <param name="instance">对象实例</param>
            <param name="PropertyName">属性名</param>
            <returns>属性值，不存在该属性返回null</returns>
        </member>
        <member name="M:NCS.Utility.Invoke(System.Object,System.String,System.Type[],System.Type[],System.Object[])">
            <summary>
            根据传入的对象，执行指定的某个非静态方法，通常用于执行私有方法。
            </summary>
            <param name="obj">方法所在的对象实例</param>
            <param name="functionName">函数名称</param>
            <param name="paramTypes">函数的参数类型，可以为null</param>
            <param name="genericTypes">若方法为泛型方法，可设置此参数</param>
            <param name="paramVals">执行方法时，要传入的参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:NCS.Utility.Invoke(System.Type,System.String,System.Type[],System.Type[],System.Object[])">
            <summary>
            根据方法名称，执行某个类中对应的静态方法
            </summary>
            <param name="t">类型</param>
            <param name="functionName">函数名称</param>
            <param name="paramTypes">函数的参数类型，可以为null</param>
            <param name="genericTypes">若方法为泛型方法，可设置此参数</param>
            <param name="paramVals">执行方法时，要传入的参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:NCS.Utility.Invoke(System.Type,System.String,System.Type[],System.Object[])">
            <summary>
            根据方法名称，执行某个类中对应的静态方法
            </summary>
            <param name="t">类型</param>
            <param name="functionName">函数名称</param>
            <param name="paramTypes">函数的参数类型，可以为null</param>
            <param name="paramVals">执行方法时，要传入的参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:NCS.Utility.Invoke(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            根据传入的对象，执行指定的某个非静态方法，通常用于执行私有方法。
            </summary>
            <param name="obj">方法所在的对象实例</param>
            <param name="functionName">函数名称</param>
            <param name="paramTypes">函数的参数类型，可以为null</param>
            <param name="paramVals">执行方法时，要传入的参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:NCS.Utility.Invoke(System.Type,System.String,System.Object[])">
            <summary>
            根据方法名称，执行某个类中对应的静态方法
            </summary>
            <param name="t">类型</param>
            <param name="functionName">函数名称</param>
            <param name="paramVals">执行方法时，要传入的参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:NCS.Utility.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            根据传入的对象，执行指定的某个非静态方法，通常用于执行私有方法。
            </summary>
            <param name="obj">方法所在的对象实例</param>
            <param name="functionName">函数名称</param>
            <param name="paramVals">执行方法时，要传入的参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:NCS.Utility.Sum(System.Int32[])">
            <summary>
            求和
            </summary>
            <param name="array">要求和的数组</param>
            <returns>和</returns>
        </member>
        <member name="M:NCS.Utility.Sum(System.Int16[])">
            <summary>
            求和
            </summary>
            <param name="array">要求和的数组</param>
            <returns>和</returns>
        </member>
        <member name="M:NCS.Utility.Sum(System.Int64[])">
            <summary>
            求和
            </summary>
            <param name="array">要求和的数组</param>
            <returns>和</returns>
        </member>
        <member name="M:NCS.Utility.Sum(System.Decimal[])">
            <summary>
            求和
            </summary>
            <param name="array">要求和的数组</param>
            <returns>和</returns>
        </member>
        <member name="M:NCS.Utility.Sum(System.Double[])">
            <summary>
            求和
            </summary>
            <param name="array">要求和的数组</param>
            <returns>和</returns>
        </member>
        <member name="M:NCS.Utility.CheckEnumIsFlag(System.Type)">
            <summary>
            检查传入的枚举类型是否是标志位（即声明中带Flag标签）
            </summary>
            <param name="t">枚举类型</param>
            <returns>返回值，若类型不是枚举，则返回false</returns>
        </member>
        <member name="M:NCS.Utility.InputBox``1(System.String,System.String,System.String,``0)">
            <summary>
            通过一个输入对话框输入一个值，并尝试转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="title">标题</param>
            <param name="tip">提示信息</param>
            <param name="regex">验证表达式</param>
            <param name="defautvalue">输入框中默认输入的值</param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.InputBox``1">
            <summary>
            通过一个输入对话框输入一个值，并尝试转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.InputBox(System.String,System.String,System.String,System.String)">
            <summary>
            通过一个输入对话框输入一个字符串
            </summary>
            <param name="title">标题</param>
            <param name="tip">提示信息</param>
            <param name="regex">验证表达式</param>
            <param name="defautvalue">输入框中默认输入的值</param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.InputBox">
            <summary>
            通过一个输入对话框输入一个字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.CopyObjectProperties(System.Object,System.Object,System.String[])">
            <summary>
            在2个不同的对象间复制同名兼容类型的属性值
            </summary>
            <param name="obj">源对象</param>
            <param name="target">目标对象</param>
            <param name="exclude">排除的属性</param>
        </member>
        <member name="M:NCS.Utility.GetEscapeCharacter(System.String)">
            <summary>
            根据字符前2位所表示的转义符，返回对应的char，只支持\t\0\v\f\\
            </summary>
            <param name="s">以\起始的转义符，至少包含2个字符，空字符串将返回\0，否则将返回第一个字符</param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.GetType(System.String)">
            <summary>
            根据类的全面获取类型，将在当前AppDomain中的所有加载的程序集中查找
            </summary>
            <param name="fullname">类型的Fullname</param>
            <returns>类型，若不存在返回null</returns>
        </member>
        <member name="M:NCS.Utility.AutoTabIndex(System.Windows.Forms.Control,System.Int32)">
            <summary>
            根据控件的位置，自动设置控件的Tab案件顺序
            </summary>
            <param name="c">要处理的控件的父控件，一般为Form</param>
            <param name="childcontrollevel">递归处理的深度，当控件结构超过该深度，放弃处理</param>
        </member>
        <member name="M:NCS.Utility.LoadAllAssembly">
            <summary>
            加载当前目录下的所有可用dll和exe到当前AppDomain，加载后，可以通过反射调用它们，但只有当程序退出后才会释放这些程序集
            </summary>
        </member>
        <member name="M:NCS.Utility.RemoveDoubleByteAlphabet(System.String)">
            <summary>
            将字符串中的全角字母/数字替换为半角
            </summary>
            <param name="s">可能包含全角字母或数字的字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:NCS.Utility.GzipData(System.Byte[])">
            <summary>
            使用Gzip算法，压缩数据
            </summary>
            <param name="b">需要压缩的数据</param>
            <returns>压缩后的数据</returns>
        </member>
        <member name="M:NCS.Utility.Un_GzipData(System.Byte[])">
            <summary>
            使用Gzip算法解压数据
            </summary>
            <param name="b">被压缩的数据</param>
            <returns>解压后的数据</returns>
        </member>
        <member name="M:NCS.Utility.PeelOffMeaninglessException(System.Exception)">
            <summary>
            如果异常是“调用事发生异常”这类无助于分析出错信息的异常，将返回该异常的InnerException
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.CheckHandlerValid(System.IntPtr)">
            <summary>
            判断指定的句柄是否有效
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.Compare(System.Object,System.Object)">
            <summary>
            对比两个同类型对象的大小
            </summary>
            <param name="v1">对象1</param>
            <param name="v2">对象2</param>
            <returns>结果，0相等，正数v1大，负数v2大，int.Max无有效比较器，int.Min:v1,v2类型不匹配</returns>
        </member>
        <member name="M:NCS.Utility.GetChineseFristAlphabet(System.Char)">
            <summary>
            获取指定汉字的首字母，若是非中文直接返回字母，无法识别则返回?
            </summary>
            <param name="c">要识别的字符</param>
            <returns>首字母</returns>
        </member>
        <member name="M:NCS.Utility.GetLogicPathObject(System.Object,System.String,System.Boolean)">
            <summary>
            根据逻辑路径，一层层获取指定的对象。如：“form.UserControl1.List.this[2].Value.GetDetail(System.String|zhangsan,System.Int32|2).Name”
            表示，获取form对象的UserControl1属性的List对象的第二个元素的Value属性，并执行Value中的GetDetail方法，方法包含两个参数string和int，最终获取GetDtail执行结果对象的Name并返回。
            </summary>
            <param name="rootObject">根对象</param>
            <param name="logicPath">逻辑路径</param>
            <param name="pathIncludeRootObject">逻辑路径是否包含根对象，若为true，则忽略逻辑路径的第一级</param>
            <returns>最终得到的对象，若中途出错，或中途某一级对象为空，为将返回空</returns>
        </member>
        <member name="M:NCS.Utility.GetGuidFromMD5(System.Byte[])">
            <summary>
            将MD5的Hash转换为guid，MD5有16和32位两种常用形式，若传入的为32位格式，则将截取中间16位生成guid
            </summary>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.GetGuidFromString(System.String)">
            <summary>
            将传入的字符串做UTF8编码后再做MD5，并将16位格式的MD5转换为Guid
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.GetGuidFromMD5(System.String)">
            <summary>
            将描述16进制数的MD5串生成Guid，若为32位的MD5，则截取中间16位；
            </summary>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility.Zip(System.String,System.Byte[])">
            <summary>
            使用zip方式压缩数据流
            </summary>
            <param name="filename">将数据流保存到zip包中使用的文件名</param>
            <param name="filecontent">数据内容</param>
            <returns>压缩后的zip数据</returns>
        </member>
        <member name="M:NCS.Utility.Zip(System.String[],System.Byte[][])">
            <summary>
            使用zip方式压缩数据流
            </summary>
            <param name="filenames">被压缩的数据的文件名列表</param>
            <param name="filecontents">要被压缩的数据的数据列表</param>
            <returns>压缩包</returns>
        </member>
        <member name="M:NCS.Utility.UnZip(System.String,System.Byte[])">
            <summary>
            解压
            </summary>
            <param name="filename">要解压的zip包中的文件名</param>
            <param name="zipdata">zip数据</param>
            <returns>解压后的数据</returns>
        </member>
        <member name="M:NCS.Utility.Serializer``1(``0)">
            <summary>
            序列化对象（需要使用Unicode存储序列化后的数据）
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象实例</param>
            <returns>序列化后的文本</returns>
        </member>
        <member name="M:NCS.Utility.Deserializer``1(System.String)">
            <summary>
            反序列化，需要Unicode编码的序列化字符串
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xml">序列化字符串</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="P:NCS.Utility.RuntimePlatform">
            <summary>
            获取当前运行环境的平台（x86（32位）或x64/ia64（64位））
            </summary>
        </member>
        <member name="P:NCS.Utility.IsRuntimeX64">
            <summary>
            判断当前运行环境是否是64位
            </summary>
        </member>
        <member name="T:NCS.CopyPropertiesAttribute">
            <summary>
            执行NCS.Utility.CopyProperties等方法时，定义额外行为
            </summary>
        </member>
        <member name="P:NCS.CopyPropertiesAttribute.ExcludeAsSource">
            <summary>
            当作为数据源时自动排除该字段
            </summary>
        </member>
        <member name="P:NCS.CopyPropertiesAttribute.ExcludeAsTarget">
            <summary>
            当作为目标数据时，排除该字段
            </summary>
        </member>
        <member name="T:NCS.UI.ComboBoxEnum">
            <summary>
            可以自动将枚举对象填充到列表中的ComboBox
            </summary>
        </member>
        <member name="M:NCS.UI.ComboBoxEnum.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:NCS.UI.ComboBoxEnum.EnumType">
            <summary>
            获取或设置一个Enum对象，（运行时）
            </summary>
        </member>
        <member name="M:NCS.UI.ComboBoxEnum.CheckAllowedItem">
            <summary>
            根据EnumWorkflow.xml指定的枚举类型值的流程关系，移除不应该列出的值
            </summary>
        </member>
        <member name="M:NCS.UI.ComboBoxEnum.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            当选择项改变时，触发UserInputed事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:NCS.UI.ComboBoxEnum.EnumTypeName">
            <summary>
            获取或设置一个Enum对象的类名称，（设计时）
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.CheckerCompare">
            <summary>
            通过Linq对象类型，自动生成字段界面的控件,其中字段相同的只显示原值，字段不同的原值和比较值一起显示
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.CheckerCompare.OnComparing">
            <summary>
            当字段中的值变更时触发
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.CheckerCompare.FieldSettings">
            <summary>
            用于描述各字段个性化表现的设置信息集合
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.CheckerCompare.DataContext">
            <summary>
            Linq数据操作上下文对象
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.CheckerCompare.DisplayAllField">
            <summary>
            是否显示所有字段（即是否显示FieldSettings没有描述过的字段）
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.CheckerCompare.LoadRecord(System.Object,System.Object)">
            <summary>
            读取2个linq数据对象，并将数据呈现在UI上
            </summary>
            <param name="LinqOrg">被比较的linq对象实例</param>
            <param name="LinqNew">比较的linq对象实例</param>
        </member>
        <member name="M:NCS.UI.DataMapping.CheckerCompare.LoadRecordGeneric``2(``0,``1)">
            <summary>
            读取2个linq数据对象，并将数据呈现在UI上
            </summary>
            <typeparam name="T">Linq对象类型</typeparam>
            <typeparam name="K">Linq对象类型</typeparam>
            <param name="LinqOrg">被比较的linq对象实例</param>
            <param name="LinqNew">比较的linq对象实例</param>
        </member>
        <member name="T:NCS.UI.DataMapping.CheckerDoubleEnter">
            <summary>
            提供MakerChecker类功能中，双重输入的控件
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.CheckerDoubleEnter.OnComparing">
            <summary>
            当开始比较2个值是否相等时触发，可以设置参数中的IsMatch属性，改变默认的对比结果
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.CheckerDoubleEnter.ReEnterFields">
            <summary>
            获取或设置需要验证输入的字段。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.CheckerDoubleEnter.LoadRecordGeneric``1(``0)">
            <summary>
            读取一个Linq数据对象，并将数据呈现在UI上，同时，根据ReEnterFields设置的值，启用指定字段的编辑功能，并清除这些字段的值
            </summary>
            <typeparam name="T">Linq对象类型，必须与MappingTable相同</typeparam>
            <param name="LinqEntity">Linq对象的实例</param>
        </member>
        <member name="P:NCS.UI.DataMapping.CheckerDoubleEnter.QueryMode">
            <summary>
            继承自Fields控件，已重写，永远为False
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.CheckerDoubleEnter.ReadOnly">
            <summary>
            继承自Fields控件，已重写，永远为true
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.CheckerDoubleEnter.SaveRecordGeneric``1(``0)">
            <summary>
            保存Linq对象的实例的泛型版本
            </summary>
            <typeparam name="T">Linq对象类型，必须与MappingTable相同</typeparam>
            <param name="LinqEntity">要保存的对象，可以为null，若为null，将新建一个MappingTable指定类型的实例</param>
            <returns>根据UI上的输入，更新后的Linq对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.CheckerDoubleEnter.SaveRecord(System.Object)">
            <summary>
            保存Linq对象的实例
            </summary>
            <param name="LinqEntity">要保存的对象，可以为null，若为null，将新建一个MappingTable指定类型的实例</param>
            <returns>根据UI上的输入，更新后的Linq对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.CheckerDoubleEnter.SaveRecord">
            <summary>
            保存数据，若之前使用LoadRecord等方法载入了数据实例，则直接操作该对象，否则新建一个MappingType指定的类型的实例。
            </summary>
            <returns>使用UI内数据更新的对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.CheckerDoubleEnter.CheckMatch(NCS.UI.DataMapping.FieldInfo[]@)">
            <summary>
            判断重新输入的字段是否与原始值相同，返回结果，相同为True。如果需要自定义某些字段的判断，可以在OnComparing事件中处理
            </summary>
            <param name="diffList">不同的字段信息列表，若函数返回false，可以通过该返回值获得具体值不相同的字段</param>
            <exception cref="T:System.Exception">当未调用过LoadRecord方法或未设置过MappingTable属性时</exception>
            <returns>返回结果，相同为True</returns>
        </member>
        <member name="T:NCS.UI.DataMapping.FieldInfo">
            <summary>
            描述字段的显示情况
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.Property">
            <summary>
            绑定的字段名
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.Visible">
            <summary>
            生成的编辑控件是否可见，仅对编辑控件有效，GridView中的字段，将忽略本属性
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.GridViewColumnVisible">
            <summary>
            生成的GridView的列是否可见
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.GridViewColumnWidth">
            <summary>
            获取或设置GridView中队应列的默认宽度，若小于等于0，则使用GridView的默认设置
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.EnforceableQuery">
            <summary>
            获取或设置作为查询条件时，是否必须选择该条件
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.ColumnFormat">
            <summary>
            当字段被格式化为字符串时,使用的格式掩码。当没有设置DefaultCellStyle的Format属性时，也会自动将本属性设置到DefaultCellStyle的Format属性上。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.Enabled">
            <summary>
            生成的编辑控件是否可用
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.AfterProperty">
            <summary>
            通常不使用，当且仅当，作为basesettings与defaultsettings合并时，作为basesettings的元素，将查找与本属性名称相同的property，并插到它的后面，若需要置于第一个，可设置为#NULL。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.InputControl">
            <summary>
            指定输入控件，为空时，自动判断
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.InputControlValueProperty">
            <summary>
            指定输入空间的取值属性，当 InputControl 被指定时，本属性也必须指定
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.VerifyRegex">
            <summary>
            仅自动判断输入控件且数据类型为文本类数据时有效，用于控制用户输入数据的合法性
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.Size">
            <summary>
            获取或设置字段控件的尺寸
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.DisplayName">
            <summary>
            获取或设置字段显示的名称，默认为字段名
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.ToolTip">
            <summary>
            获取或设置提供鼠标停留提示的对象
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.DefualtValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.DefaultCellStyle">
            <summary>
            获取或设置作为DataGridView定义列时，指定相应的格式，注意：本属性不会被序列化。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.FK_DisplayFields">
            <summary>
            获取或设置代表外键的字段，可以使用多个字段，使用半角逗号分隔。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.FK_FieldInfo">
            <summary>
            为外键准备的字段定义表，用于外键选择时，自动开启的界面中应用该样式设置。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.FK_DisplayAllFields">
            <summary>
            对于外键对象，是否显示所有字段
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.FK_EX_Where">
            <summary>
            做外键数据查询时，需要做额外筛选而加的条件:Lambda表达式(参数为@0形式)。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.FK_EX_Where_Params">
            <summary>
            做外键数据查询时，需要做额外筛选而加条件语句的参数。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.FK_OrderBy">
            <summary>
            做外键数据查询时，需要做排序设置，可在此按Linq语法格式添加。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.FK_ReadOnly">
            <summary>
            明细档是否提供Add,Edit,Remove按钮
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.QueryValueRegional">
            <summary>
            在查询模式下，当字段是指类型时（不包括枚举/布尔/Guid）是否可以查询一个范围区间。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.ToString">
            <summary>
            已重写，当设置绑定的字段后，显示绑定字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.GetFieldInfo(System.String,NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            根据属性名，获取对应的FieldInfo对象，若不存在，将返回null
            </summary>
            <param name="property">属性名</param>
            <param name="fieldinfoarray">FieldInfo集合</param>
            <returns>对应的FieldInfo对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.SaveSettings(NCS.UI.DataMapping.FieldInfo[],System.String)">
            <summary>
            序列化指定的信息集合到文件
            </summary>
            <param name="settings">要序列化的集合</param>
            <param name="path">要保存的文件位置</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.SaveSettings``1(NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            序列化指定的信息集合到文件，将保存到当前程序目录，以T指定的类型为文件名
            </summary>
            <typeparam name="T">LinqO/R对象类型</typeparam>
            <param name="settings">要序列化的集合</param>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldInfo.CacheFieldInfo">
            <summary>
            获取或设置是否使用缓存来保存FieldInfo配置，默认为True
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.LoadSettings(System.String)">
            <summary>
            读取序列化后的文件，并反序列化为字段信息集合
            </summary>
            <param name="path">文件位置</param>
            <returns>字段信息集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.LoadSettings(System.Reflection.Assembly,System.String)">
            <summary>
            从指定的程序集的资源中，读取配置，当asm为null时，默认读取启动程序集的资源列表
            </summary>
            <param name="asm"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.LoadSettings``1">
            <summary>
            读取序列化后的文件，并反序列化为字段信息集合。将读取当前程序目录，以T指定的类型为文件名
            </summary>
            <typeparam name="T">LinqO/R对象类型</typeparam>
            <returns>字段信息集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.LoadSettings(System.Type)">
            <summary>
            读取序列化后的文件，并反序列化为字段信息集合。将读取当前程序目录，以T指定的类型为文件名
            </summary>
            <param name="t">LinqO/R对象类型</param>
            <returns>字段信息集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.Merge(NCS.UI.DataMapping.FieldInfo[],NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            合并2个集合，以base为基础，将defualt中且在base中没有的FieldInfo合并到新集合
            </summary>
            <param name="baseSettings">基础集合，都将包含在新集合中</param>
            <param name="defaultSettings">补充基础集合中没有的FieldInfo</param>
            <returns>合并后的字段信息集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.Merge(NCS.UI.DataMapping.FieldInfo[],System.String)">
            <summary>
            合并2个集合，以base为基础，将defualt中且在base中没有的FieldInfo合并到新集合
            </summary>
            <param name="baseSettings">基础集合，都将包含在新集合中</param>
            <param name="path">默认集合序列化后存放的文件位置</param>
            <returns>合并后的字段信息集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.Merge``1(NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            合并2个集合，以base为基础，将defualt中且在base中没有的FieldInfo合并到新集合
            </summary>
            <typeparam name="T">LinqO/R对象类型，若存在将读取该类型的默认配置</typeparam>
            <param name="baseSettings">基础集合，都将包含在新集合中</param>
            <returns>合并后的字段信息集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.Merge(NCS.UI.DataMapping.FieldInfo[],System.Type)">
            <summary>
            合并2个集合，以base为基础，将defualt中且在base中没有的FieldInfo合并到新集合
            </summary>
            <param name="t">LinqO/R对象类型，若存在将读取该类型的默认配置</param>
            <param name="baseSettings">基础集合，都将包含在新集合中</param>
            <returns>合并后的字段信息集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.ConvertFormat(System.String)">
            <summary>
            将旧版本的（binary）序列化文件转换为新的(xml,单项序列化)格式
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfo.HideProperties(System.String[])">
            <summary>
            获取一个FieldInfo集合，用于将所有指定属性设置为不可见
            </summary>
            <param name="properties">属性名列表</param>
            <returns></returns>
        </member>
        <member name="T:NCS.UI.DataMapping.HideEnumItemAttribute">
            <summary>
            一个标志位，指定的枚举对象将默认隐藏
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.FlagEnumCombinValuesAttribute">
            <summary>
            标志位，对于Flag标记的枚举类型，可以添加一些组合值，他们将与枚举值一样显示在列表中
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.EnumToStringAttribute">
            <summary>
            可以指定一个继承自IEnumToString接口的类型，用于对枚举类型的输出值进行额外转换
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.FlagsEnumQueryOptionAttribute">
            <summary>
            针对组合枚举的查询选项
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FlagsEnumQueryOptionAttribute.AllowMulitSelection">
            <summary>
            作为查询条件，允许选择组合值
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FlagsEnumQueryOptionAttribute.ExistIntersectionAsMatch">
            <summary>
            查询时，若条件与目标字段存在交集，则认为满足条件。否则必须目标字段包含条件中所有的组合值才视为满足
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.IEnumToString">
            <summary>
            提供一个ToSting函数，用来格式化枚举值的输出
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.EnumDisplay">
            <summary>
            主要用于为Enum提供额外显示值
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.FieldRequiredException">
            <summary>
            有字段必须填写
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldRequiredException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldRequiredException.FieldInfo">
            <summary>
            未填写的字段信息
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.FieldSize">
            <summary>
            表示自动生成的字段控件的尺寸
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldSize.Normal">
            <summary>
            正常大小，根据设定的一行允许的控件数自行决定尺寸
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldSize.FullLine">
            <summary>
            整行
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldSize.TwoLines">
            <summary>
            两行
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldSize.FourLines">
            <summary>
            四行
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.IFieldInputControl">
            <summary>
            用于字段编辑的自定义控件的接口
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.IFieldInputControl.UserInputed">
            <summary>
            当用户输入/对值做变更时触发，用于Fields控件的Query模式下，自动选中复选框使用
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.IFieldControl">
            <summary>
            字段集合类控件，如Fields，FieldsDestails等
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.FieldSettings">
            <summary>
            用于描述个字段个性化表现的设置信息集合
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.DataContext">
            <summary>
            Linq数据操作上下文对象
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.DisplayAllField">
            <summary>
            是否显示所有字段（即是否显示FieldSettings没有描述过的字段）
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.LineFieldsCount">
            <summary>
            每行显示的字段的数量
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.ToolTip">
            <summary>
            用于在字段上显示提示信息的控件
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.QueryMode">
            <summary>
            查询模式，查询模式时，字段名将使用复选框呈现，允许用户选择要做筛选的字段
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.MappingTable">
            <summary>
            要映射的Linq O/R Mapping对象，请先设置好其他属性后再设置本属性
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.ReadOnly">
            <summary>
            只读模式，当仅用户数据查看模式时，可以使用将本属性设为true
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.IsTextBoxWithFormatValid">
            <summary>
            检查使用正则表达式限定的数据是否符合要求
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.RequireHeight">
            <summary>
            控件实际需要的高度
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.IFieldControl.FieldsObject">
            <summary>
            获取字段编辑控件
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.IFieldControl.SaveRecord(System.Object)">
            <summary>
            保存Linq对象的实例
            </summary>
            <param name="LinqEntity">要保存的对象，可以为null，若为null，将新建一个MappingTable指定类型的实例</param>
            <returns>根据UI上的输入，更新后的Linq对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.IFieldControl.SaveRecordGeneric``1(``0)">
            <summary>
            保存Linq对象的实例的泛型版本
            </summary>
            <typeparam name="T">Linq对象类型，必须与MappingTable相同</typeparam>
            <param name="LinqEntity">要保存的对象，可以为null，若为null，将新建一个MappingTable指定类型的实例</param>
            <returns>根据UI上的输入，更新后的Linq对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.IFieldControl.LoadRecord(System.Object)">
            <summary>
            读取一个Linq数据对象，并将数据呈现在UI上
            </summary>
            <param name="LinqEntity">Linq对象的实例</param>
        </member>
        <member name="M:NCS.UI.DataMapping.IFieldControl.LoadRecordGeneric``1(``0)">
            <summary>
            读取一个Linq数据对象，并将数据呈现在UI上
            </summary>
            <typeparam name="T">Linq对象类型，必须与MappingTable相同</typeparam>
            <param name="LinqEntity">Linq对象的实例</param>
        </member>
        <member name="T:NCS.UI.DataMapping.IQuerierExItem">
            <summary>
            仅仅做为类型限定，不具备实际接口属性方法
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.LinqObjectEventArgs">
            <summary>
            Linq对象相关事件的事件参数
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.LinqObjectEventArgs.LinqObject">
            <summary>
            Linq对象实例
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.LinqObjectEventArgs.Invalid">
            <summary>
            允许编程判断LinqObject是否符合校验规则，如不符合，则设置本属性为true，可取消操作。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.LinqObjectEventArgs.LinqType">
            <summary>
            获取当前编辑的对象的类型
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.FieldsSaveEventArgs">
            <summary>
            Linq对象相关事件的事件参数，主要用于尚未保存时
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsSaveEventArgs.GetValue(System.String)">
            <summary>
            获取UI上，某属性的值
            </summary>
            <param name="property">属性名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsSaveEventArgs.SetValue(System.String,System.Object)">
            <summary>
            设置UI上，某属性的值
            </summary>
            <param name="property">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsSaveEventArgs.MappingTable">
            <summary>
            当前处理对象的类型
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsSaveEventArgs.Invalid">
            <summary>
            允许编程判断UI上各个字段是否符合校验规则，如不符合，则设置本属性为true，可取消操作。
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsSaveEventArgs.IsAddNew">
            <summary>
            表示当前事件是否是新建时触发的
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.FieldValueChangedEventArgs">
            <summary>
            当Field控件中，字段的值改变时触发，对于自定义控件，需要实现IFieldInputControl接口
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldValueChangedEventArgs.NewValue">
            <summary>
            改变后的值
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldValueChangedEventArgs.FieldInfo">
            <summary>
            字段信息，包括字段名，样式等信息
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldValueChangedEventArgs.IsChangedByCode">
            <summary>
            指示，值的改变，是否是通过代码实现的。若为false，则大多是由用户操作导致的
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldValueChangedEventArgs.Fields">
            <summary>
            当前编辑控件所在的Fields控件
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.EnumFlag.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.EnumFlag.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.EnumFlag.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldCompareItem.OnComparing">
            <summary>
            当开始比较2个值是否相等时触发，可以设置参数中的IsMatch属性，改变默认的对比结果
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldCompareItem.FieldInfo">
            <summary>
            获取或设置描述字段格式的信息
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldCompareItem.DataContext">
            <summary>
            获取或设置Linq连接的上下文对象
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldCompareItem.DataBind(System.Object,System.Object)">
            <summary>
            绘制控件，根据参数，绘制“一致”和“不一致”两种类型的界面。
            </summary>
            <param name="linqobj1">原始值，必须是一个Linq ORM实体类</param>
            <param name="linqobj2">新值，必须是一个Linq ORM实体类</param>
            <returns>由FieldInfo指定的属性是否相等。</returns>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldCompareItem.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldCompareItem.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldCompareItem.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.FieldCompareEventArgs">
            <summary>
            用于描述对比两字段是否相等时的事件参数
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldCompareEventArgs.Value1">
            <summary>
            第一个实体的属性值
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldCompareEventArgs.Value2">
            <summary>
            第二个实体的属性值
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldCompareEventArgs.DisplayString1">
            <summary>
            第一个实体的属性要显示的成该属性指定的字符串
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldCompareEventArgs.DisplayString2">
            <summary>
            第二个实体的属性要显示的成该属性指定的字符串
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldCompareEventArgs.IsMatch">
            <summary>
            通过设置本属性，可以人为改变对比结果
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldCompareEventArgs.FieldInfo">
            <summary>
            获取字段信息
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldGuidEditor.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldGuidEditor.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldGuidEditor.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldInfoEditor.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfoEditor.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldInfoEditor.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.FieldItem">
            <summary>
            用于自动创建的界面中，各个字段的表示，不建议单独使用
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldItem.Value">
            <summary>
            获取或设置字段的值
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldItem.CheckMode">
            <summary>
            获取或设置字段显示方式是否是查询模式
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldItem.DataContext">
            <summary>
            获取或设置Linq连接上下文
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldItem.Checked">
            <summary>
            当CheckMode为True时，获取或设置是否选中
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldItem.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldItem.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldItem.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.Fields">
            <summary>
            通过Linq对象类型，自动生成字段界面的控件
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Fields.FieldValueChanged">
            <summary>
            当字段中的值变更时触发
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.FieldSettings">
            <summary>
            用于描述个字段个性化表现的设置信息集合
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.IsTextBoxWithFormatValid">
            <summary>
            检查使用正则表达式限定的数据是否符合要求
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.DataContext">
            <summary>
            Linq数据操作上下文对象
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.DisplayAllField">
            <summary>
            是否显示所有字段（即是否显示FieldSettings没有描述过的字段）
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.LineFieldsCount">
            <summary>
            每行显示的字段的数量
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.ToolTip">
            <summary>
            用于在字段上显示提示信息的控件
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.QueryMode">
            <summary>
            查询模式，查询模式时，字段名将使用复选框呈现，允许用户选择要做筛选的字段
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.ReadOnly">
            <summary>
            只读模式，当仅用户数据查看模式时，可以使用将本属性设为true
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.RequireHeight">
            <summary>
            控件实际需要的高度
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.FieldsObject">
            <summary>
            获取字段编辑控件
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Fields.MappingTable">
            <summary>
            要隐射的Linq O/R Mapping对象，请先设置好其他属性后再设置本属性
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.GetValue(System.String)">
            <summary>
            获取UI上，某属性的值
            </summary>
            <param name="property">属性名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.SetValue(System.String,System.Object)">
            <summary>
            设置UI上，某属性的值
            </summary>
            <param name="property">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.GetFieldItem(System.String)">
            <summary>
            根据属性名，获取对应的FieldItem对象，若不存在，将返回null
            </summary>
            <param name="property">属性名</param>
            <returns>对应的FieldItem对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.GetFieldValueControl(System.String)">
            <summary>
            获取指定字段的编辑控件实例
            </summary>
            <param name="property">属性名</param>
            <returns>控件实例</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.GetFieldValueControl(System.String,System.Boolean)">
            <summary>
            获取指定字段的编辑控件实例，并当Query模式中，可以获取可能存在的第二个编辑控件
            </summary>
            <param name="property">属性名</param>
            <param name="control2">是否获取第二个编辑控件</param>
            <returns>控件实例</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.SaveRecord">
            <summary>
            保存数据，若之前使用LoadRecord等方法载入了数据实例，则直接操作该对象，否则新建一个MappingType指定的类型的实例。
            </summary>
            <returns>使用UI内数据更新的对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.SaveRecord(System.Object)">
            <summary>
            保存Linq对象的实例
            </summary>
            <param name="LinqEntity">要保存的对象，可以为null，若为null，将新建一个MappingTable指定类型的实例</param>
            <returns>根据UI上的输入，更新后的Linq对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.SaveRecordGeneric``1(``0)">
            <summary>
            保存Linq对象的实例的泛型版本
            </summary>
            <typeparam name="T">Linq对象类型，必须与MappingTable相同</typeparam>
            <param name="LinqEntity">要保存的对象，可以为null，若为null，将新建一个MappingTable指定类型的实例</param>
            <returns>根据UI上的输入，更新后的Linq对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.LoadRecord(System.Object)">
            <summary>
            读取一个Linq数据对象，并将数据呈现在UI上
            </summary>
            <param name="LinqEntity">Linq对象的实例</param>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.LoadRecordGeneric``1(``0)">
            <summary>
            读取一个Linq数据对象，并将数据呈现在UI上
            </summary>
            <typeparam name="T">Linq对象类型，必须与MappingTable相同</typeparam>
            <param name="LinqEntity">Linq对象的实例</param>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.Query(System.String,System.String,System.Object[])">
            <summary>
            当QueryMode时，执行查询操作，实际将调用泛型版本QueryGeneric执行。
            </summary>
            <param name="ex_where">额外的数据筛选逻辑，Lambda语法，参数使用@0...@n形式</param>
            <param name="order">排序字段，逗号分割，Lambda语法</param>
            <param name="ex_where_param">额外筛选逻辑所需的数据参数，数量必须与@0...@n参数数目相等</param>
            <returns>查询结果，实际是一个IList的泛型数据集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.Query(System.Data.Linq.DataContext,System.Type,System.String,System.String,System.Object[])">
            <summary>
            执行查询操作，实际将调用泛型版本QueryGenericStatic执行。
            </summary>
            <param name="context">Linq上下文</param>
            <param name="mappingTable">要</param>
            <param name="ex_where">额外的数据筛选逻辑，Lambda语法，参数使用@0...@n形式</param>
            <param name="order">排序字段，逗号分割，Lambda语法</param>
            <param name="ex_where_param">额外筛选逻辑所需的数据参数，数量必须与@0...@n参数数目相等</param>
            <returns>查询结果，实际是一个IList的泛型数据集合</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.QueryGenericStatic2``1(System.Data.Linq.DataContext,System.String,System.String,System.Object[])">
            <summary>
            执行查询操作
            </summary>
            <typeparam name="T">要返回的数据集合类型</typeparam>
            <param name="context">Linq上下文</param>
            <param name="ex_where">额外的数据筛选逻辑，Lambda语法，参数使用@0...@n形式</param>
            <param name="order">排序字段，逗号分割，Lambda语法</param>
            <param name="ex_where_param">额外筛选逻辑所需的数据参数，数量必须与@0...@n参数数目相等</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.QueryGeneric``1(System.String,System.String,System.Object[])">
            <summary>
            当QueryMode时，执行查询操作
            </summary>
            <typeparam name="T">要返回的数据集合类型，必须与MappingTable相同</typeparam>
            <param name="ex_where">额外的数据筛选逻辑，Lambda语法，参数使用@0...@n形式</param>
            <param name="order">排序字段，逗号分割，Lambda语法</param>
            <param name="ex_where_param">额外筛选逻辑所需的数据参数，数量必须与@0...@n参数数目相等</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Fields.QueryGenericStatic``1(System.Data.Linq.DataContext,System.Collections.Generic.List{NCS.UI.DataMapping.FieldItem},System.String,System.String,System.Object[])">
            <summary>
            执行查询操作
            </summary>
            <typeparam name="T">要返回的数据集合类型</typeparam>
            <param name="context">Linq上下文</param>
            <param name="controls">FieldItem控件集合，用于获取用户输入的条件</param>
            <param name="ex_where">额外的数据筛选逻辑，Lambda语法，参数使用@0...@n形式</param>
            <param name="order">排序字段，逗号分割，Lambda语法</param>
            <param name="ex_where_param">额外筛选逻辑所需的数据参数，数量必须与@0...@n参数数目相等</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:NCS.UI.DataMapping.FieldsDetails">
            <summary>
            根据Linq对象类型生成主明细档关系的控件
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldsDetails.BeforeAddEditObject">
            <summary>
            当新建/编辑子对象，尚未保存为Linq数据实例时触发，可以加入验证逻辑，并取消操作。
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldsDetails.AfterAddEditObject">
            <summary>
            当新建/编辑子对象，保存为Linq数据实例后触发，可以另外处理数据，但不可取消操作（忽略Invalid属性）
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldsDetails.BeforeEditObject">
            <summary>
            当编辑子对象之前触发，可以检查用户是否有操作本条数据的权限，并可以取消操作。
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldsDetails.BeforeAddObject">
            <summary>
            当新建子对象之前触发，可以检查用户是否有操作本条数据的权限，并可以取消操作。
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldsDetails.BeforeRemoveObject">
            <summary>
            当删除子对象之前触发，可以检查用户是否有操作本条数据的权限，并可以取消操作。
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldsDetails.DetailSelectionChanged">
            <summary>
            当明细档选择改变时触发，请使用CurrentGridView获取所需对象
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldsDetails.DetailRowDblClick">
            <summary>
            当明细档行被双击时触发
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.FieldsDetails.FieldValueChanged">
            <summary>
            当字段中的值变更时触发
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.FieldSettings">
            <summary>
            用于描述个字段个性化表现的设置信息集合
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.DataContext">
            <summary>
            Linq数据操作上下文对象
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.DisplayAllField">
            <summary>
            是否显示所有字段（即是否显示FieldSettings没有描述过的字段）
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.LineFieldsCount">
            <summary>
            每行显示的字段的数量
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.ToolTip">
            <summary>
            用于在字段上显示提示信息的控件
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.QueryMode">
            <summary>
            查询模式，查询模式时，字段名将使用复选框呈现，允许用户选择要做筛选的字段
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.ReadOnly">
            <summary>
            只读模式，当仅用户数据查看模式时，可以使用将本属性设为true
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.IsTextBoxWithFormatValid">
            <summary>
            检查使用正则表达式限定的数据是否符合要求
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.RequireHeight">
            <summary>
            控件实际需要的高度
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.FieldsObject">
            <summary>
            获取字段编辑控件
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.MappingTable">
            <summary>
            要映射的Linq O/R Mapping对象，请先设置好其他属性后再设置本属性
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.FieldObjectHeightPercent">
            <summary>
            字段编辑部分的高度占总控件高度的百分比，0-100，默认50
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.SaveRecord">
            <summary>
            保存对象，若之前调用过LoadRecord等函数，则将操作读取的对象，否则将新建一个MappingTable指定类型的实例。
            </summary>
            <returns>保存后的对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.SaveRecord(System.Object)">
            <summary>
            保存Linq对象的实例
            </summary>
            <param name="LinqEntity">要保存的对象，可以为null，若为null，将新建一个MappingTable指定类型的实例</param>
            <returns>根据UI上的输入，更新后的Linq对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.SaveRecordGeneric``1(``0)">
            <summary>
            保存Linq对象的实例的泛型版本
            </summary>
            <typeparam name="T">Linq对象类型，必须与MappingTable相同</typeparam>
            <param name="LinqEntity">要保存的对象，可以为null，若为null，将新建一个MappingTable指定类型的实例</param>
            <returns>根据UI上的输入，更新后的Linq对象</returns>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.LoadRecord(System.Object)">
            <summary>
            读取一个Linq数据对象，并将数据呈现在UI上
            </summary>
            <param name="LinqEntity">Linq对象的实例</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.LoadRecordGeneric``1(``0)">
            <summary>
            读取一个Linq数据对象，并将数据呈现在UI上
            </summary>
            <typeparam name="T">Linq对象类型，必须与MappingTable相同</typeparam>
            <param name="LinqEntity">Linq对象的实例</param>
        </member>
        <member name="P:NCS.UI.DataMapping.FieldsDetails.CurrentGridView">
            <summary>
            当前使用的明细档GridViewFK对象
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.UpdateObject2GridView(System.Object)">
            <summary>
            更新对应列表框中的记录信息
            </summary>
            <param name="linqobj"></param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.InsterObject2GridView(System.Object)">
            <summary>
            将一条新的记录加入到列表框中
            </summary>
            <param name="linqobj"></param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.RemoveObjectFromGridView(System.Object)">
            <summary>
            从列表框中移除某条记录
            </summary>
            <param name="linqobj"></param>
        </member>
        <member name="F:NCS.UI.DataMapping.FieldsDetails.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FieldsDetails.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.FKField.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.FKField.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.FKField.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.frmDatePick.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.frmDatePick.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.UI.DataMapping.frmDatePick.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.frmEditObject.FieldValueChanged">
            <summary>
            当字段中的值变更时触发
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.frmEditObject.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.frmEditObject.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.UI.DataMapping.frmEditObject.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.frmEnumFlagList.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.frmEnumFlagList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.UI.DataMapping.frmEnumFlagList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.frmMaintenance.#ctor(System.String,System.Data.Linq.DataContext,System.Type,System.Boolean,System.Boolean,System.EventHandler{NCS.UI.DataMapping.FieldsSaveEventArgs},System.EventHandler{NCS.UI.DataMapping.LinqObjectEventArgs},System.EventHandler{NCS.UI.DataMapping.LinqObjectEventArgs},NCS.UI.DataMapping.FieldInfo[],System.String,System.Object[],System.String)">
            <summary>
            创建一个用于数据维护的窗口
            </summary>
            <param name="title">窗口标题（要维护的对象名称）</param>
            <param name="context">数据操作上下文（可以为null，将创建一个新的本地事务来对数据进行操作。推荐为 null）</param>
            <param name="mappingTable">要处理的Linq数据对象类型</param>
            <param name="displayAllFields">是否现实所有没有在FieldInfo中指定的字段</param>
            <param name="canEditDetail">是否可以编辑明细</param>
            <param name="BeforeAddEditObject">当添加/编辑之前触发的事件委托，可修改字段值，判断数据有效性，取消保存，可为null</param>
            <param name="BeforeEditRemove">当明细档被删除或修改之前触发，可以用来判断明细档的数据权限，并取消处理，可为null</param>
            <param name="AfterAddEditObject">当添加删除之后触发，可以对保存的对象的值做手工处理，可以为null</param>
            <param name="fieldsettings">用于规范字段信息的设置集和，可以为null</param>
            <param name="ex_Where">额外的查询条件，Lambda语法，可以为null</param>
            <param name="ex_WhereParams">对应条件的参数集和，可以为null</param>
            <param name="ex_Order">排序规则，可以为null</param>
        </member>
        <member name="F:NCS.UI.DataMapping.frmMaintenance.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.frmMaintenance.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.UI.DataMapping.frmMaintenance.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.frmQueryObject.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.frmQueryObject.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.UI.DataMapping.frmQueryObject.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.Querier">
            <summary>
            根据Linq数据类型自动生成查询模式的用户控件
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.BeforeQuery">
            <summary>
            当Query按钮按下之后触发，可以在此事件内，设置额外的筛选条件和排序规则
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.AfterQuery">
            <summary>
            当Query结束，并取到结果集时触发。注意，如果使用本事件，必须使用lock锁住result结果集，防止线程冲突。
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.DataGridViewCellDoubleClicked">
            <summary>
            当单元格被双击时触发，实际只允许行选择，故实际效果为行双击时触发
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.FieldValueChanged">
            <summary>
            当字段中的值变更时触发
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.StartQuery">
            <summary>
            当开始执行查询时触发
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.FinishQuery">
            <summary>
            当查询结束，数据源绑定完成后触发
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.DataGridViewRowPrePaint">
            <summary>
            当DataGridView的行需要重绘时触发，可在该事件中添加修改单元格颜色等设置
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.DataGridViewSelectRowChanged">
            <summary>
            当DataGridView中选中的行改变时触发
            </summary>
        </member>
        <member name="E:NCS.UI.DataMapping.Querier.DataGridViewRowClick">
            <summary>
            当DataGridView中鼠标点击某行时触发
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.QueryHandler">
            <summary>
            用于设置自定义查询语句，主要针对复杂查询，如join等，但最终输出必须为IQueryable&lt;T&gt;,T必须与MappingTable同类型。
            配置该属性后，将忽略BeforeQuery事件
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.DataBind">
            <summary>
            执行数据绑定，根据 MappingTable, DisplayAllField, ResultDisplayAllFields, LineFieldsCount, FieldSettings 属性生成界面
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.DataBind(System.Type,System.Boolean,System.Boolean,System.Int32,NCS.UI.DataMapping.FieldInfo[])">
            <summary>
            执行数据绑定，并可直接设置相关属性
            </summary>
            <param name="LinqObject">Linq数据类型</param>
            <param name="displayAllFields">是否显示所有字段</param>
            <param name="resultDisplayAllFields">结果集是否显示所有字段</param>
            <param name="lineFieldCount">每行显示多少个条件字段</param>
            <param name="fieldsettings">相关字段的个性化设置信息集合</param>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.GridViewCheckBoxColumn">
            <summary>
            查询结果的首列是否加上一个复选框
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.PageSize">
            <summary>
            分页每页记录上限
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.PageCount">
            <summary>
            获取分页的总共需要分多少页
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.ShowExportButton">
            <summary>
            获取或设置导出按钮是否可见
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.ShowPrintButton">
            <summary>
            获取或设置打印按钮是否可见
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.PageIndex">
            <summary>
            获取或设置当前分页的页号
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.HideConditions">
            <summary>
            获取或设置是否隐藏UI中的条件部分
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.IsTextBoxWithFormatValid">
            <summary>
            检查使用正则表达式限定的数据是否符合要求
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.GetCheckedItems">
            <summary>
            获取被复选选中行所带表的数据，当GridViewCheckBoxColumn=true时，有效，否则返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.Query">
            <summary>
            执行查询操作(异步)
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.SelectedItem">
            <summary>
            选中的对象，返回GridView中选中项对应的数据实例，若没有选中，将返回null
            设置本属性意为为条件设置默认值，类似于本控件废弃的LoadRecord方法
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.ResultDisplayAllFields">
            <summary>
            结果集中，是否显示所有字段，若否，则根据FieldSettings定义的格式显示，未定义字段隐藏
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.QueryOnLoad">
            <summary>
            当控件绑定数据源后，是否直接执行查询操作
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.MappingTable">
            <summary>
            要映射的Linq O/R Mapping对象，请先设置好其他属性后再设置本属性
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.RequireHeight">
            <summary>
            控件实际需要的高度
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.FieldsObject">
            <summary>
            获取字段编辑控件
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.FieldSettings">
            <summary>
            用于描述个字段个性化表现的设置信息集合
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.DataContext">
            <summary>
            Linq数据操作上下文对象
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.DisplayAllField">
            <summary>
            是否显示所有字段（即是否显示FieldSettings没有描述过的字段）
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.LineFieldsCount">
            <summary>
            每行显示的字段的数量
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.ToolTip">
            <summary>
            用于在字段上显示提示信息的控件
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.QueryMode">
            <summary>
            查询模式，查询模式时，字段名将使用复选框呈现，允许用户选择要做筛选的字段，永为true
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.ReadOnly">
            <summary>
            继承自接口，本控件不支持，请勿使用
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.SaveRecord(System.Object)">
            <summary>
            继承自接口，本控件不支持，请勿使用
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.SaveRecordGeneric``1(``0)">
            <summary>
            继承自接口，本控件不支持，请勿使用
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.LoadRecord(System.Object)">
            <summary>
            继承自接口，本控件不支持，请勿使用
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.LoadRecordGeneric``1(``0)">
            <summary>
            继承自接口，本控件不支持，请勿使用
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.GetResultDataTable">
            <summary>
            获取查询结果包含的DataTable集合
            </summary>
            <returns>查询结果，若没有，则返回空对象</returns>
        </member>
        <member name="P:NCS.UI.DataMapping.Querier.DataGridView">
            <summary>
            控件中的DataGridView对象，少数特殊要求可能需要直接操作DataGridView对象
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.UpdateObject2GridView(System.Object)">
            <summary>
            更新对应列表框中的记录信息
            </summary>
            <param name="linqobj"></param>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.InsterObject2GridView(System.Object)">
            <summary>
            将一条新的记录加入到列表框中
            </summary>
            <param name="linqobj"></param>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.RemoveObjectFromGridView(System.Object)">
            <summary>
            从列表框中移除某条记录
            </summary>
            <param name="linqobj"></param>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.GetInsertList">
            <summary>
            获取通过InsterObject2GridView方法添加的对象的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.GetRemoveList">
            <summary>
            获取通过RemoveObjectFromGridView方法移除的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.GetUpdateList">
            <summary>
            获取通过UpdateObject2GridView方法更新的列表
            </summary>
            <returns></returns>
        </member>
        <member name="F:NCS.UI.DataMapping.Querier.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.Querier.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.BeforeQueryEventArgs">
            <summary>
            Query事件参数
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.BeforeQueryEventArgs.EX_Where">
            <summary>
            额外的筛选条件,Lambda语法，参数使用@0..@n形式
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.BeforeQueryEventArgs.OrderBY">
            <summary>
            排序字段,Lambda语法
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.BeforeQueryEventArgs.EX_WhereParams">
            <summary>
            筛选条件的数据参数,必须与EX_Where中的参数数目相等
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.BeforeQueryEventArgs.GridView">
            <summary>
            呈现结果GridView，若需要额外处理，可在此更改
            </summary>
        </member>
        <member name="T:NCS.UI.DataMapping.AfterQueryEventArgs">
            <summary>
            Query事件参数
            </summary>
        </member>
        <member name="P:NCS.UI.DataMapping.AfterQueryEventArgs.Result">
            <summary>
            查询结果集
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.QuerierEx.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.QuerierEx.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.QuerierEx.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.QuerierExItem.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.QuerierExItem.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.QuerierExItem.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:NCS.UI.DataMapping.QuerierExItemGroup.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.DataMapping.QuerierExItemGroup.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.DataMapping.QuerierExItemGroup.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:NCS.UI.frmChangePassword.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.UI.frmChangePassword.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.UI.frmChangePassword.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.UI.LoginPanel">
            <summary>
            登陆面板
            </summary>
        </member>
        <member name="M:NCS.UI.LoginPanel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:NCS.UI.LoginPanel.Login">
            <summary>
            当点击 login 按钮时触发
            </summary>
        </member>
        <member name="E:NCS.UI.LoginPanel.Cancel">
            <summary>
            当点击 cancel 按钮时触发
            </summary>
        </member>
        <member name="M:NCS.UI.LoginPanel.CheckUsernameLength(System.UInt32,System.UInt32)">
            <summary>
            检查用户名长度，包括最小和最大值
            </summary>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns>是否符合长度要求</returns>
        </member>
        <member name="M:NCS.UI.LoginPanel.CheckPasswordLength(System.UInt32,System.UInt32)">
            <summary>
            检查密码长度，包括最小和最大值
            </summary>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns>是否符合长度要求</returns>
        </member>
        <member name="M:NCS.UI.LoginPanel.CheckUsernameCharsValid(System.Char[])">
            <summary>
            检查用户名是否包含非法字符
            </summary>
            <param name="invalidchars">非法字符集合，可省略，默认检查半角单双引号</param>
            <returns>用户名是否合法</returns>
        </member>
        <member name="M:NCS.UI.LoginPanel.CheckPasswordStrong">
            <summary>
            检查密码强度
            </summary>
            <returns>密码强度</returns>
        </member>
        <member name="F:NCS.UI.LoginPanel.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.LoginPanel.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.LoginPanel.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.UI.LoginEventArgs">
            <summary>
            传递登陆时的用户名和密码
            </summary>
        </member>
        <member name="P:NCS.UI.LoginEventArgs.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:NCS.UI.LoginEventArgs.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="M:NCS.UI.LoginEventArgs.PasswordToMD5">
            <summary>
            将密码通过MD5加密，取得Hash值
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.UI.LoginEventArgs.PasswordTo3DES(System.String)">
            <summary>
            将密码使用3重DES加密（使用同样密码可以解密），解密方法为 NCS.Tools.QuickEncrypt.TripleDESDncrypt
            </summary>
            <param name="encodeKey">用来加密密码的密钥</param>
            <returns>字符形式的3DES密文</returns>
        </member>
        <member name="M:NCS.UI.LoginEventArgs.PasswordToBase64(System.Text.Encoding)">
            <summary>
            将密码经过Base64编码
            </summary>
            <param name="srcEncoding">密码编码前使用的字符集</param>
            <returns>Base64编码</returns>
        </member>
        <member name="M:NCS.UI.LoginEventArgs.TryLogin(System.String)">
            <summary>
            获取当前用户名密码对因的用户对象，若用户名密码错误，则返回空对象。
            <param name="encodePassword">经过加密的密码字符串，请使用提供的 MD5,3DES 等函数加密。</param>
            <returns>当前用户名密码对因的用户对象，若用户名密码错误，则返回空对象。</returns>
            </summary>
        </member>
        <member name="M:NCS.UI.LoginEventArgs.LockUser">
            <summary>
            锁定用户，锁定后，用户将无法登陆
            </summary>
        </member>
        <member name="P:NCS.UI.LoginEventArgs.LoginFaildTimes">
            <summary>
            已经登陆失败的次数
            </summary>
        </member>
        <member name="T:NCS.UI.MenuBuilder">
            <summary>
            用于根据配置，自动生成菜单的组件
            </summary>
        </member>
        <member name="E:NCS.UI.MenuBuilder.MenuClicked">
            <summary>
            当菜单被点击时触发此事件，主要针对 Custom 类型菜单项
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilder.#ctor(System.ComponentModel.IContainer)">
            <summary>
            构造函数
            </summary>
            <param name="container">容器</param>
        </member>
        <member name="P:NCS.UI.MenuBuilder.Menu">
            <summary>
            将要绘制的菜单对象
            </summary>
        </member>
        <member name="P:NCS.UI.MenuBuilder.MenuImageList">
            <summary>
            为菜单绘制图标而要使用到的图像列表控件
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilder.BuildMenu(System.String)">
            <summary>
            开始绘制菜单
            </summary>
            <param name="RoleID">采用的Role</param>
        </member>
        <member name="T:NCS.UI.MenuBuilder.MenuEventArgs">
            <summary>
            菜单点击事件中提供相关信息
            </summary>
        </member>
        <member name="P:NCS.UI.MenuBuilder.MenuEventArgs.ClickedMenu">
            <summary>
            被点击的菜单对象
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilder.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.MenuBuilder.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.UI.MenuBuilderGuide">
            <summary>
            提供MenuBuilder控件的相关支持，即提供MenuBuilder的编辑界面
            </summary>
            <summary>
            提供与MenuBuilder配套的配置界面
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilderGuide.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:NCS.UI.MenuBuilderGuide.FormAssembly">
            <summary>
            获取设置用于指定读取Form列表的程序集，可以为空（读取入口程序的程序集中的窗体）
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilderGuide.CommitChanges">
            <summary>
            将本次修改提交到数据库，从而保存修改
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilderGuide.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilderGuide.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.MenuBuilderGuide.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.UI.MenuBuilder_v2">
            <summary>
            用于根据配置，自动生成菜单的组件
            </summary>
        </member>
        <member name="E:NCS.UI.MenuBuilder_v2.MenuClicked">
            <summary>
            当菜单被点击时触发此事件，主要针对 Custom 类型菜单项
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilder_v2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilder_v2.#ctor(System.ComponentModel.IContainer)">
            <summary>
            构造函数
            </summary>
            <param name="container">容器</param>
        </member>
        <member name="P:NCS.UI.MenuBuilder_v2.Menu">
            <summary>
            将要绘制的菜单对象
            </summary>
        </member>
        <member name="P:NCS.UI.MenuBuilder_v2.MenuImageList">
            <summary>
            为菜单绘制图标而要使用到的图像列表控件
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilder_v2.BuildMenu(System.String)">
            <summary>
            开始绘制菜单
            </summary>
            <param name="RoleID">采用的Role</param>
        </member>
        <member name="T:NCS.UI.MenuBuilder_v2.MenuEventArgs">
            <summary>
            菜单点击事件中提供相关信息
            </summary>
        </member>
        <member name="P:NCS.UI.MenuBuilder_v2.MenuEventArgs.ClickedMenu">
            <summary>
            被点击的菜单对象
            </summary>
        </member>
        <member name="T:NCS.UI.MenuBuilder_v2.MenuState">
            <summary>
            对应数据库中，菜单状态
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder_v2.MenuState.Active">
            <summary>
            活动菜单
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder_v2.MenuState.InActive">
            <summary>
            无效菜单
            </summary>
        </member>
        <member name="T:NCS.UI.MenuBuilder_v2.MenuType">
            <summary>
            菜单类型（直接启动窗体或执行自定义操作）
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder_v2.MenuType.RunForm">
            <summary>
            直接启动窗体
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder_v2.MenuType.RunFormWithParameter">
            <summary>
            启动窗体，并将Parameter指定的参数作为构造参数传入
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder_v2.MenuType.Custom">
            <summary>
            自定义操作，将触发 MenuClick 操作
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder_v2.MenuType.Parent">
            <summary>
            作为其他菜单的父菜单，无实际功能
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder_v2.MenuType.Separator">
            <summary>
            菜单分割符，无实际功能
            </summary>
        </member>
        <member name="F:NCS.UI.MenuBuilder_v2.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:NCS.UI.MenuBuilder_v2.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:NCS.UI.MenuBuilder_v2.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:NCS.UI.IMenuBuilder_ClickHandler">
            <summary>
            用于MenuBuilder控件，它将扫描所有继承自该接口的类型，在MenuClick时间中依次调用它们
            </summary>
        </member>
        <member name="T:NCS.UI.ProductNameLabel">
            <summary>
            显示应用程序名称的标签，继承自 Label 控件
            </summary>
        </member>
        <member name="M:NCS.UI.ProductNameLabel.#ctor">
            <summary>
            创建一个ProductNameLabel控件
            </summary>
        </member>
        <member name="P:NCS.UI.ProductNameLabel.Text">
            <summary>
            显示当前产品名称（设计时仅显示 Product Name）
            </summary>
        </member>
        <member name="T:NCS.UI.ProductCopyrightLabel">
            <summary>
            显示应用程序版权的标签，继承自 Label 控件
            </summary>
        </member>
        <member name="M:NCS.UI.ProductCopyrightLabel.#ctor">
            <summary>
            创建一个ProductCopyrightLabel控件
            </summary>
        </member>
        <member name="P:NCS.UI.ProductCopyrightLabel.Text">
            <summary>
            显示当前产品版权（设计时仅显示 Copyright Information）
            </summary>
        </member>
        <member name="T:NCS.UI.ProductVersionLabel">
            <summary>
            显示应用程序版本的标签，继承自 Label 控件
            </summary>
        </member>
        <member name="M:NCS.UI.ProductVersionLabel.#ctor">
            <summary>
            创建一个ProductVersionLabel控件
            </summary>
        </member>
        <member name="P:NCS.UI.ProductVersionLabel.Fromat">
            <summary>
            显示版本时使用的格式，如 Version: {0}
            </summary>
        </member>
        <member name="P:NCS.UI.ProductVersionLabel.Text">
            <summary>
            显示当前产品版本（设计时仅显示 1.0.0.0）
            </summary>
        </member>
        <member name="T:NCS.UI.CitiLogoImage">
            <summary>
            默认包含CitiLogo的PictureBox
            </summary>
        </member>
        <member name="M:NCS.UI.CitiLogoImage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NCS.UI.UserInfoBar">
            <summary>
            提供标准的主窗口信息栏
            </summary>
        </member>
        <member name="M:NCS.UI.UserInfoBar.#ctor">
            <summary>
            显示应用程序登陆用户信息，继承自 StatusStrip 控件
            </summary>
        </member>
        <member name="M:NCS.UI.UserInfoBar.DataBind">
            <summary>
            根据Business.CommonLogic.CurrentInformation的信息，生成任务栏。
            </summary>
        </member>
        <member name="F:NCS.UI.UserInfoBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCS.UI.UserInfoBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCS.UI.UserInfoBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NCS.Utility2">
            <summary>
            提供各种简化的功能函数
            </summary>
        </member>
        <member name="M:NCS.Utility2.GetRootParentType(System.Windows.Forms.Control)">
            <summary>
            获取某控件的父容器(获取最顶端的父容器)
            </summary>
            <param name="c">控件实例</param>
            <returns>父容器，可能为null</returns>
        </member>
        <member name="M:NCS.Utility2.ContractSerializer``1(``0)">
            <summary>
            单向序列化对象，比如可以序列化Linq实体类
            </summary>
            <typeparam name="T">要序列化的类型，必须设置过System.Runtime.Serialization.DataContractAttribute扩展属性</typeparam>
            <param name="obj">要序列化的对象</param>
            <returns>经过序列化的XML字符串</returns>
        </member>
        <member name="M:NCS.Utility2.ContractDeserializer``1(System.String)">
            <summary>
            单向反序列化对象，比如可以处理Linq实体类
            </summary>
            <typeparam name="T">要序列化的类型，必须设置过System.Runtime.Serialization.DataContractAttribute扩展属性</typeparam>
            <param name="xml">要反序列化的XML字符串</param>
            <returns>经过反序列化的对象</returns>
        </member>
        <member name="M:NCS.Utility2.GetValue``1(System.Data.DataTable,System.String,``0)">
            <summary>
            泛型方法，返回DataTabel首行某列的数据的强类型数据，同时，将检查数据是否为空或无效（此时返回默认值）
            </summary>
            <typeparam name="T">将返回的数据类型</typeparam>
            <param name="dt">DataTabel 数据表</param>
            <param name="colname">列名称</param>
            <param name="defaultvalue">默认值</param>
            <returns>强类型数据</returns>
        </member>
        <member name="M:NCS.Utility2.GetValue``1(System.Data.DataRow,System.String,``0)">
            <summary>
            泛型方法，返回DataRow某列的数据的强类型数据，同时，将检查数据是否为空或无效（此时返回默认值）
            </summary>
            <typeparam name="T">将返回的数据类型</typeparam>
            <param name="dr">DataRow 数据表的某列</param>
            <param name="colname">列名称</param>
            <param name="defaultvalue">默认值</param>
            <returns>强类型数据</returns>
        </member>
        <member name="M:NCS.Utility2.GetValue``1(System.Object,``0)">
            <summary>
            泛型方法，返回一个被装箱的数据的强类型值，同时，将检查数据是否为空或无效（此时返回默认值）
            </summary>
            <typeparam name="T">将返回的数据类型</typeparam>
            <param name="dbobj">被装箱的数据</param>
            <param name="defaultvalue">默认值</param>
            <returns>强类型数据</returns>
        </member>
        <member name="M:NCS.Utility2.GetType(System.String)">
            <summary>
            根据类的全面获取类型，将在当前AppDomain中的所有加载的程序集中查找
            </summary>
            <param name="fullname">类型的Fullname</param>
            <returns>类型，若不存在返回null</returns>
        </member>
        <member name="M:NCS.Utility2.ConvertEntityAndCollection``3(System.Collections.Generic.IEnumerable{``2},System.String[])">
            <summary>
            快速将一个列表的内容复制到一个新列表中，目标类型可以与原类型不同，将自动复制属性
            </summary>
            <typeparam name="L">新列表集合类型</typeparam>
            <typeparam name="T">目标类型</typeparam>
            <typeparam name="S">原类型</typeparam>
            <param name="exclude">排除的属性名列表，可选</param>
            <param name="sourcelist">原列表集合</param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility2.CopyObjectProperties``2(``0,``1,System.String[])">
            <summary>
            在2个不同的对象间复制同名兼容类型的属性值，与NCS.Utility.CopyObjectProperties的区别在于本函数不是用反射，效率比NCS.Utility.CopyObjectProperties高60-400倍
            </summary>
            <param name="obj">源对象</param>
            <param name="target">目标对象</param>
            <param name="exclude">排除的属性</param>
        </member>
        <member name="M:NCS.Utility2.IsSubTypeOf(System.Type,System.Type)">
            <summary>
            判断指定类型是否为另一个类型的父类，支持不带类型参数的泛型父类的判断
            </summary>
            <param name="type"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility2.GetGenericParentType(System.Type,System.Type)">
            <summary>
            使用反射将指定，获取指定类型父类的泛型类型
            </summary>
            <param name="type"></param>
            <param name="genericparent"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility2.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对集合中的每一个元素执行指定的操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action"></param>
        </member>
        <member name="M:NCS.Utility2.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将指定的集合转换为ObservableCollection集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility2.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            为 System.Collections.ObjectModel.Collection 集合添加 AddRange方法，用于批量添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="elements"></param>
        </member>
        <member name="M:NCS.Utility2.DataContractSerializer``1(``0)">
            <summary>
            使用DataContract方式序列化对象（需要使用Unicode存储序列化后的数据）
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象实例</param>
            <returns>序列化后的文本</returns>
        </member>
        <member name="M:NCS.Utility2.DataContractDeserializer``1(System.String)">
            <summary>
            使用DataContract方式反序列化，需要Unicode编码的序列化字符串
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xml">序列化字符串</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:NCS.Utility2.DataContractSerializerAndZip``1(``0)">
            <summary>
            将指定的对象序列化并使用zip压缩，返回压缩后的数据流，请使用DataContractUnzipAndDeserializer逆运算。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NCS.Utility2.DataContractUnzipAndDeserializer``1(System.Byte[])">
            <summary>
            将通过DataContractSerializerAndZip处理的数据流还原为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.v35res">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NCS.v35res.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NCS.v35res.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:NCS.View.CompareValueEntity">
            <summary>
            用于保存对比内容的实体类
            </summary>
        </member>
        <member name="E:NCS.View.CompareValueEntity.StatusChanged">
            <summary>
            状态改变时触发
            </summary>
        </member>
        <member name="P:NCS.View.CompareValueEntity.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:NCS.View.CompareValueEntity.DisplayName">
            <summary>
            显示的名称
            </summary>
        </member>
        <member name="P:NCS.View.CompareValueEntity.Value1">
            <summary>
            比较的值1，当前值
            </summary>
        </member>
        <member name="P:NCS.View.CompareValueEntity.Value2">
            <summary>
            比较的值2，被修改前的值
            </summary>
        </member>
        <member name="P:NCS.View.CompareValueEntity.Match">
            <summary>
            获取Value1和2是否相等
            </summary>
        </member>
        <member name="P:NCS.View.CompareValueEntity.Format">
            <summary>
            格式化输出格式，如 N2，D2，yyyyMMdd等
            </summary>
        </member>
        <member name="M:NCS.View.CompareValueEntity.GetValue1">
            <summary>
            获取被比较的值1，当前值
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.View.CompareValueEntity.GetValue2">
            <summary>
            获取被比较的值2，被修改前的值
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCS.View.ICompareEntityProperty">
            <summary>
            定义一个属性，包含当前对象需要对比的另一个实体对象的实例
            </summary>
        </member>
        <member name="T:NCS.View.DataAnnotations.SizeInDataFormAttribute">
            <summary>
            控制在DataFormEx中的高度和宽度
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.SizeInDataFormAttribute.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="M:NCS.View.DataAnnotations.SizeInDataFormAttribute.#ctor(NCS.View.DataAnnotations.SizeInDataForm)">
            <summary>
            构造函数
            </summary>
            <param name="size">在DataFormEx中的尺寸</param>
        </member>
        <member name="T:NCS.View.DataAnnotations.SizeInDataForm">
            <summary>
            在DataFormEx中的尺寸
            </summary>
        </member>
        <member name="F:NCS.View.DataAnnotations.SizeInDataForm.Normal">
            <summary>
            普通，根据DataFormEx的设置，可能占整行或半行货1/3行等……
            </summary>
        </member>
        <member name="F:NCS.View.DataAnnotations.SizeInDataForm.FullLine">
            <summary>
            无条件占据整行
            </summary>
        </member>
        <member name="F:NCS.View.DataAnnotations.SizeInDataForm.TwoLines">
            <summary>
            编辑模式下占据2行，查询模式下1行
            </summary>
        </member>
        <member name="F:NCS.View.DataAnnotations.SizeInDataForm.FourLines">
            <summary>
            编辑模式下占据4行，查询模式下1行
            </summary>
        </member>
        <member name="T:NCS.View.DataAnnotations.ItemsControlAttribute">
            <summary>
            针对 Selector 类型控件（ListBox/ComboBox等），设置这些控件的Itemssource，DispalyPath/ValuePath等属性
            </summary>
        </member>
        <member name="M:NCS.View.DataAnnotations.ItemsControlAttribute.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="bindtype">数据源所在类型</param>
            <param name="sourcepath">数据源属性名，可以为空，若为空则直接使用数据源类型的实例作为源</param>
            <param name="displaypath">用于显示的字段</param>
            <param name="valuepath">作为值返回的字段</param>
        </member>
        <member name="M:NCS.View.DataAnnotations.ItemsControlAttribute.#ctor(System.Type,System.String)">
            <summary>
            构造函数，只指定数据源，主要针对string数组类数据源
            </summary>
            <param name="bindtype">源类型</param>
            <param name="sourcepath">源属性</param>
        </member>
        <member name="M:NCS.View.DataAnnotations.ItemsControlAttribute.#ctor(System.Type)">
            <summary>
            构造函数，只指定数据源，主要针对本身就是集合的对象。
            </summary>
            <param name="bindtype">源对象</param>
        </member>
        <member name="T:NCS.View.DataAnnotations.QueryConditionOperatorAttribute">
            <summary>
            针对查询条件字段，设置操作符。（默认为等于）
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.QueryConditionOperatorAttribute.Operator">
            <summary>
            操作符
            </summary>
        </member>
        <member name="M:NCS.View.DataAnnotations.QueryConditionOperatorAttribute.#ctor(NCS.DataAccess.QueryConditionOperator)">
            <summary>
            构造函数
            </summary>
            <param name="op"></param>
        </member>
        <member name="T:NCS.View.DataAnnotations.AutoGenerateBehaviorAttribute">
            <summary>
            设置字段是否可见/可用，包括DataFormEx，DataGridEx，DiffForm，QueryForm（Export）
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.AutoGenerateBehaviorAttribute.ExportVisibility">
            <summary>
            针对QueryForm中Export按钮的默认实现
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.AutoGenerateBehaviorAttribute.DataFormExVisibility">
            <summary>
            DataFormEx可见性，注意，该属性的优先级低于DisplayAttribute.AutoGenerateField属性，若该属性=False，则无视本属性的设置。
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.AutoGenerateBehaviorAttribute.DataFormExEnabled">
            <summary>
            DataFormEx是否可编辑
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.AutoGenerateBehaviorAttribute.DataGridExVisibility">
            <summary>
            DataGridEx可见性，注意，该属性的优先级低于DisplayAttribute.AutoGenerateField属性，若该属性=False，则无视本属性的设置。
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.AutoGenerateBehaviorAttribute.DiffFormVisibility">
            <summary>
            DiffForm可见性
            </summary>
        </member>
        <member name="M:NCS.View.DataAnnotations.AutoGenerateBehaviorAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NCS.View.DataAnnotations.SortAbilityAttribute">
            <summary>
            用于制定字段是否是可排序字段，可以制定默认排序方式，主要用于QueryOrderByProperty.GetOrderByPropertiesByConditions()或GetOrderByPropertiesByEntity()方法
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.SortAbilityAttribute.DefaultSortMode">
            <summary>
            默认排序方式，升序/降序/默认；默认=升序
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.SortAbilityAttribute.Priority">
            <summary>
            优先级，数字越小，优先级越高，默认=1
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.SortAbilityAttribute.DefaultSortField">
            <summary>
            默认生效的排序字段，=True时，默认出现在排序列表中，否则默认出现在待选列表中
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.SortAbilityAttribute.Sortable">
            <summary>
            可排序性，决定指定的字段是否支持排序
            </summary>
        </member>
        <member name="M:NCS.View.DataAnnotations.SortAbilityAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:NCS.View.DataAnnotations.DataGridColumnSetupAttribute">
            <summary>
            设置DataGridEx中Column属性的限制条件
            </summary>
        </member>
        <member name="P:NCS.View.DataAnnotations.DataGridColumnSetupAttribute.HeaderHorizontalAlignment">
            <summary>
            列头内容的对齐方式
            </summary>
        </member>
        <member name="M:NCS.View.DataAnnotations.DataGridColumnSetupAttribute.#ctor">
            <summary>
            构造函数，默认：可拖拽，可排序，可修改列宽，非冻结列，可编辑
            </summary>
        </member>
        <member name="T:NCS.View.EntityViewBase">
            <summary>
            为用于数据绑定且与实际EntityFramework实体类交互的中间层类提供基础功能和定义
            </summary>
        </member>
        <member name="M:NCS.View.EntityViewBase.OnPropertyChanged(System.String)">
            <summary>
            报告属性发生更改
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:NCS.View.EntityViewBase.LoadFrom(System.Object[],System.String[])">
            <summary>
            构造函数，针对部分中间层实体类偏向业务逻辑，与数据库定义可能不完全对应，可能对于多张表，
            允许传入多个类型的实体类，将自动复制这些类中的同名属性，若有重名属性，则以排在前面的类的属性值为准
            </summary>
            <param name="entity">用于初始化，从这些实体中将同名属性复制到当前类中</param>
            <param name="exclude">排除的属性</param>
        </member>
        <member name="M:NCS.View.EntityViewBase.LoadFrom(System.Object,System.String[])">
            <summary>
            构造函数，针对部分中间层实体类偏向业务逻辑，将自动复制entity中的同名属性
            </summary>
            <param name="entity">用于初始化，从这些实体中将同名属性复制到当前类中</param>
            <param name="exclude">排除的属性</param>
        </member>
        <member name="M:NCS.View.EntityViewBase.SaveTo(System.Object[],System.String[])">
            <summary>
            将当前对象中的属性值，复制到目标实体中
            </summary>
            <param name="entity">目标实体</param>
            <param name="exclude">要排除的属性</param>
        </member>
        <member name="M:NCS.View.EntityViewBase.SaveTo(System.Object,System.String[])">
            <summary>
            将当前对象中的属性值，复制到目标实体中
            </summary>
            <param name="entity">目标实体</param>
            <param name="exclude">要排除的属性</param>
        </member>
        <member name="M:NCS.View.EntityViewBase.GetPrimaryKeyHash">
            <summary>
            计算当前对象的主键的Hash值
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCS.View.PropertyChangedHelper">
            <summary>
            为属性更改提供额外的通知函数，使用lambda表达式表示字段，而不需要再使用字符串，避免拼写错误。
            </summary>
        </member>
        <member name="M:NCS.View.PropertyChangedHelper.OnPropertyChanged``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            使用lambda表达式指出属性变更
            </summary>
            <typeparam name="T">继承自EntityViewBase的类型</typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyChangedBase">对象实例</param>
            <param name="expression">表示属性的lambda表达式</param>
        </member>
        <member name="T:NCS.View.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:NCS.View.ExpressionItem">
            <summary>
            表示一个表达式对象（也可以表示字段或属性）
            </summary>
        </member>
        <member name="P:NCS.View.ExpressionItem.Expression">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:NCS.View.ExpressionItem.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="M:NCS.View.ExpressionItem.GetExpressionItemList``1(System.String[])">
            <summary>
            根据指定的字段名称，自动从制定的类型中读取属性名和显示名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.View.QueryConditionEntityViewBase">
            <summary>
            用于描述查询条件的实体类基类，实现INotifyPropertyChanged接口，并会自动初始化所含属性，不需要手工初始化。
            </summary>
        </member>
        <member name="E:NCS.View.QueryConditionEntityViewBase.PropertyChanged">
            <summary>
            当属性改变时触发
            </summary>
        </member>
        <member name="M:NCS.View.QueryConditionEntityViewBase.OnPropertyChanged(System.String)">
            <summary>
            触发PropertyChanged事件
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:NCS.View.QueryConditionEntityViewBase.#ctor">
            <summary>
            构造函数，初始化所有查询条件属性
            </summary>
        </member>
        <member name="M:NCS.View.QueryConditionEntityViewBase.ToString">
            <summary>
            获取可描述包含条件的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.View.QueryConditionEntityViewBase.ToString(System.String)">
            <summary>
            获取可描述包含条件的字符串
            </summary>
            <param name="splitconditions">各个条件之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="T:NCS.View.IQueryConditionItem">
            <summary>
            表示一个查询条件项。
            </summary>
        </member>
        <member name="P:NCS.View.IQueryConditionItem.Checked">
            <summary>
            选中/有效
            </summary>
        </member>
        <member name="P:NCS.View.IQueryConditionItem.EnforceCondition">
            <summary>
            是否是强制条件
            </summary>
        </member>
        <member name="T:NCS.View.IQueryConditionValueItem`1">
            <summary>
            一个包含指定类型的值的查询条件项
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:NCS.View.IQueryConditionValueItem`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:NCS.View.IQueryConditionRangeItem`1">
            <summary>
            包含两个值，表示一个区间的查询条件项
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NCS.View.IQueryConditionRangeItem`1.Value2">
            <summary>
            值2
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionItem`1">
            <summary>
            表示一个具体类型的查询项
            </summary>
            <typeparam name="T">具体的数据类型</typeparam>
        </member>
        <member name="E:NCS.View.QueryConditionItem`1.PropertyChanged">
            <summary>
            当有属性改变时触发
            </summary>
        </member>
        <member name="M:NCS.View.QueryConditionItem`1.OnPropertyChanged(System.String)">
            <summary>
            触发PropertyChanged事件
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:NCS.View.QueryConditionItem`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:NCS.View.QueryConditionItem`1.Checked">
            <summary>
            被选中
            </summary>
        </member>
        <member name="P:NCS.View.QueryConditionItem`1.EnforceCondition">
            <summary>
            是否强制选择
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionRangeItem`1">
            <summary>
            表示一个区间的属性
            </summary>
            <typeparam name="T">具体的数据类型，需要是值类型</typeparam>
        </member>
        <member name="P:NCS.View.QueryConditionRangeItem`1.Value2">
            <summary>
            第二个值
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionStringItem">
            <summary>
            字符串条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionGuidItem">
            <summary>
            Guid条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionInt32Item">
            <summary>
            int32条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionInt64Item">
            <summary>
            int64条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionDecimalItem">
            <summary>
            deciaml条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionDateTimeItem">
            <summary>
            日期条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionDoubleItem">
            <summary>
            double条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionInt32RangeItem">
            <summary>
            int32区间条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionInt64RangeItem">
            <summary>
            int64区间条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionDecimalRangeItem">
            <summary>
            decimal区间条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionDateTimeRangeItem">
            <summary>
            日期区间条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionDoubleRangeItem">
            <summary>
            double区间条件选项
            </summary>
        </member>
        <member name="T:NCS.View.QueryConditionMulitItem`1">
            <summary>
            不定项条件选项
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="P:NCS.View.QueryConditionMulitItem`1.SplitCharInUI">
            <summary>
            界面上分割各个值的字符
            </summary>
        </member>
        <member name="P:NCS.View.QueryConditionMulitItem`1.SplitCharInDB">
            <summary>
            数据库中分割各个值的字符
            </summary>
        </member>
        <member name="M:NCS.View.QueryConditionMulitItem`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:NCS.View.QueryConditionMulitItem`1.ShowValuesInTextBox">
            <summary>
            在文本框中，显示选中的值还是友好的名称，默认为false。显示友好的名称
            </summary>
        </member>
        <member name="M:NCS.View.QueryConditionMulitItem`1.CheckOneItemValid(System.String)">
            <summary>
            检查拆分后的单个项目是否合法
            </summary>
            <param name="s">拆分后的单个项的字符串形式</param>
            <returns></returns>
        </member>
        <member name="M:NCS.View.QueryConditionMulitItem`1.GetOrganizedValue">
            <summary>
            组织各个项，拼接成SplitCharInDB连接的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCS.View.QueryConditionMulitItem`1.GetOrganizedValue(System.Char)">
            <summary>
            组织各个项，拼接成传入字符c连接的字符串
            </summary>
            <param name="c">分隔符</param>
            <returns></returns>
        </member>
        <member name="T:NCS.View.QueryConditionMulitStringItem">
            <summary>
            字符串类型的不定数量选项条件
            </summary>
        </member>
        <member name="M:NCS.View.QueryConditionMulitStringItem.CheckOneItemValid(System.String)">
            <summary>
            检查一个被截取的对象是否合法
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.View.QueryConditionMulitValueItem`1">
            <summary>
            值类型的不定数量条件选项
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NCS.View.QueryConditionMulitValueItem`1.CheckOneItemValid(System.String)">
            <summary>
            检查传入的字符串是否是T指定的值
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:NCS.View.QueryConditionExpressionItem">
            <summary>
            表达式类型字段，默认使用文本框控件，根据实际需要请指定下拉列表或其他自定义控件
            </summary>
        </member>
        <member name="P:NCS.View.QueryConditionExpressionItem.Type">
            <summary>
            表达式类型，字段或表达式
            </summary>
        </member>
        <member name="P:NCS.View.QueryConditionExpressionItem.Operators">
            <summary>
            支持的操作符列表
            </summary>
        </member>
        <member name="P:NCS.View.QueryConditionExpressionItem.Expressions">
            <summary>
            默认的表达式列表，若为空，则默认提供文本框输入
            </summary>
        </member>
        <member name="T:NCS.WCF.SilverlightFaultBehavior">
            <summary>
            主要针对Silverlight中得到所有http反馈，只要不是200的，全部返回404，导致无法得到实际错误信息。使用本约束，强制重写httpstate=200，从而使得Silverlight端也可以正确得到服务器的错误内容。
            </summary>
        </member>
        <member name="T:NCS.WCF.BusinessException">
            <summary>
            业务类逻辑异常，由程序员人为触发，前台捕获此类异常后，可以有特殊处理逻辑。
            </summary>
        </member>
        <member name="T:NCS.WCF.QuickExceptionAccessSettingsAttribute">
            <summary>
            控制WCF WebService的可访问特性，如果使用本标签标记方法或WCF类本身，则需要在QuickExceptionProcessor的Register中的checkAccess参数中，调用本类的静态方法：CheckAccess来控制可访问性
            </summary>
        </member>
        <member name="M:NCS.WCF.QuickExceptionAccessSettingsAttribute.CheckAccess(System.Reflection.MethodBase,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            用以配合QuickExceptionProcessor的Register中的checkAccess参数
            </summary>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
    </members>
</doc>
